// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TapiEthEthMepSpec tapi eth eth mep spec
// swagger:model tapi.eth.EthMepSpec
type TapiEthEthMepSpec struct {

	// none
	EthMepCommon *TapiEthEthMepCommon `json:"eth-mep-common,omitempty"`

	// none
	EthMepSink *TapiEthEthMepSink `json:"eth-mep-sink,omitempty"`

	// none
	EthMepSourcePac *TapiEthEthMepSource `json:"eth-mep-source-pac,omitempty"`
}

// Validate validates this tapi eth eth mep spec
func (m *TapiEthEthMepSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEthMepCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEthMepSink(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEthMepSourcePac(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TapiEthEthMepSpec) validateEthMepCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.EthMepCommon) { // not required
		return nil
	}

	if m.EthMepCommon != nil {
		if err := m.EthMepCommon.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eth-mep-common")
			}
			return err
		}
	}

	return nil
}

func (m *TapiEthEthMepSpec) validateEthMepSink(formats strfmt.Registry) error {

	if swag.IsZero(m.EthMepSink) { // not required
		return nil
	}

	if m.EthMepSink != nil {
		if err := m.EthMepSink.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eth-mep-sink")
			}
			return err
		}
	}

	return nil
}

func (m *TapiEthEthMepSpec) validateEthMepSourcePac(formats strfmt.Registry) error {

	if swag.IsZero(m.EthMepSourcePac) { // not required
		return nil
	}

	if m.EthMepSourcePac != nil {
		if err := m.EthMepSourcePac.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eth-mep-source-pac")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TapiEthEthMepSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TapiEthEthMepSpec) UnmarshalBinary(b []byte) error {
	var res TapiEthEthMepSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
