// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TapiVirtualNetworkVirtualNetworkConstraint tapi virtual network virtual network constraint
// swagger:model tapi.virtual.network.VirtualNetworkConstraint
type TapiVirtualNetworkVirtualNetworkConstraint struct {
	TapiCommonLocalClass

	// The list of costs where each cost relates to some aspect of the TopologicalEntity.
	CostCharacteristic []*TapiTopologyCostCharacteristic `json:"cost-characteristic"`

	// none
	DiversityExclusion []*TapiVirtualNetworkVirtualNwServiceRef `json:"diversity-exclusion"`

	// The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.
	LatencyCharacteristic []*TapiTopologyLatencyCharacteristic `json:"latency-characteristic"`

	// none
	RequestedCapacity *TapiCommonCapacity `json:"requested-capacity,omitempty"`

	// none
	ServiceLayer []TapiCommonLayerProtocolName `json:"service-layer"`

	// An abstract value the meaning of which is mutually agreed â€“ typically represents metrics such as - Class of service, priority, resiliency, availability
	ServiceLevel string `json:"service-level,omitempty"`

	// none
	SinkServiceEndPoint *TapiCommonServiceInterfacePointRef `json:"sink-service-end-point,omitempty"`

	// none
	SrcServiceEndPoint *TapiCommonServiceInterfacePointRef `json:"src-service-end-point,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TapiVirtualNetworkVirtualNetworkConstraint) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 TapiCommonLocalClass
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.TapiCommonLocalClass = aO0

	// AO1
	var dataAO1 struct {
		CostCharacteristic []*TapiTopologyCostCharacteristic `json:"cost-characteristic"`

		DiversityExclusion []*TapiVirtualNetworkVirtualNwServiceRef `json:"diversity-exclusion"`

		LatencyCharacteristic []*TapiTopologyLatencyCharacteristic `json:"latency-characteristic"`

		RequestedCapacity *TapiCommonCapacity `json:"requested-capacity,omitempty"`

		ServiceLayer []TapiCommonLayerProtocolName `json:"service-layer"`

		ServiceLevel string `json:"service-level,omitempty"`

		SinkServiceEndPoint *TapiCommonServiceInterfacePointRef `json:"sink-service-end-point,omitempty"`

		SrcServiceEndPoint *TapiCommonServiceInterfacePointRef `json:"src-service-end-point,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.CostCharacteristic = dataAO1.CostCharacteristic

	m.DiversityExclusion = dataAO1.DiversityExclusion

	m.LatencyCharacteristic = dataAO1.LatencyCharacteristic

	m.RequestedCapacity = dataAO1.RequestedCapacity

	m.ServiceLayer = dataAO1.ServiceLayer

	m.ServiceLevel = dataAO1.ServiceLevel

	m.SinkServiceEndPoint = dataAO1.SinkServiceEndPoint

	m.SrcServiceEndPoint = dataAO1.SrcServiceEndPoint

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TapiVirtualNetworkVirtualNetworkConstraint) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.TapiCommonLocalClass)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		CostCharacteristic []*TapiTopologyCostCharacteristic `json:"cost-characteristic"`

		DiversityExclusion []*TapiVirtualNetworkVirtualNwServiceRef `json:"diversity-exclusion"`

		LatencyCharacteristic []*TapiTopologyLatencyCharacteristic `json:"latency-characteristic"`

		RequestedCapacity *TapiCommonCapacity `json:"requested-capacity,omitempty"`

		ServiceLayer []TapiCommonLayerProtocolName `json:"service-layer"`

		ServiceLevel string `json:"service-level,omitempty"`

		SinkServiceEndPoint *TapiCommonServiceInterfacePointRef `json:"sink-service-end-point,omitempty"`

		SrcServiceEndPoint *TapiCommonServiceInterfacePointRef `json:"src-service-end-point,omitempty"`
	}

	dataAO1.CostCharacteristic = m.CostCharacteristic

	dataAO1.DiversityExclusion = m.DiversityExclusion

	dataAO1.LatencyCharacteristic = m.LatencyCharacteristic

	dataAO1.RequestedCapacity = m.RequestedCapacity

	dataAO1.ServiceLayer = m.ServiceLayer

	dataAO1.ServiceLevel = m.ServiceLevel

	dataAO1.SinkServiceEndPoint = m.SinkServiceEndPoint

	dataAO1.SrcServiceEndPoint = m.SrcServiceEndPoint

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this tapi virtual network virtual network constraint
func (m *TapiVirtualNetworkVirtualNetworkConstraint) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with TapiCommonLocalClass
	if err := m.TapiCommonLocalClass.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCostCharacteristic(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiversityExclusion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLatencyCharacteristic(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestedCapacity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceLayer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSinkServiceEndPoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSrcServiceEndPoint(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TapiVirtualNetworkVirtualNetworkConstraint) validateCostCharacteristic(formats strfmt.Registry) error {

	if swag.IsZero(m.CostCharacteristic) { // not required
		return nil
	}

	for i := 0; i < len(m.CostCharacteristic); i++ {
		if swag.IsZero(m.CostCharacteristic[i]) { // not required
			continue
		}

		if m.CostCharacteristic[i] != nil {
			if err := m.CostCharacteristic[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cost-characteristic" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TapiVirtualNetworkVirtualNetworkConstraint) validateDiversityExclusion(formats strfmt.Registry) error {

	if swag.IsZero(m.DiversityExclusion) { // not required
		return nil
	}

	for i := 0; i < len(m.DiversityExclusion); i++ {
		if swag.IsZero(m.DiversityExclusion[i]) { // not required
			continue
		}

		if m.DiversityExclusion[i] != nil {
			if err := m.DiversityExclusion[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("diversity-exclusion" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TapiVirtualNetworkVirtualNetworkConstraint) validateLatencyCharacteristic(formats strfmt.Registry) error {

	if swag.IsZero(m.LatencyCharacteristic) { // not required
		return nil
	}

	for i := 0; i < len(m.LatencyCharacteristic); i++ {
		if swag.IsZero(m.LatencyCharacteristic[i]) { // not required
			continue
		}

		if m.LatencyCharacteristic[i] != nil {
			if err := m.LatencyCharacteristic[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("latency-characteristic" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TapiVirtualNetworkVirtualNetworkConstraint) validateRequestedCapacity(formats strfmt.Registry) error {

	if swag.IsZero(m.RequestedCapacity) { // not required
		return nil
	}

	if m.RequestedCapacity != nil {
		if err := m.RequestedCapacity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("requested-capacity")
			}
			return err
		}
	}

	return nil
}

func (m *TapiVirtualNetworkVirtualNetworkConstraint) validateServiceLayer(formats strfmt.Registry) error {

	if swag.IsZero(m.ServiceLayer) { // not required
		return nil
	}

	for i := 0; i < len(m.ServiceLayer); i++ {

		if err := m.ServiceLayer[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("service-layer" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *TapiVirtualNetworkVirtualNetworkConstraint) validateSinkServiceEndPoint(formats strfmt.Registry) error {

	if swag.IsZero(m.SinkServiceEndPoint) { // not required
		return nil
	}

	if m.SinkServiceEndPoint != nil {
		if err := m.SinkServiceEndPoint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sink-service-end-point")
			}
			return err
		}
	}

	return nil
}

func (m *TapiVirtualNetworkVirtualNetworkConstraint) validateSrcServiceEndPoint(formats strfmt.Registry) error {

	if swag.IsZero(m.SrcServiceEndPoint) { // not required
		return nil
	}

	if m.SrcServiceEndPoint != nil {
		if err := m.SrcServiceEndPoint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("src-service-end-point")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TapiVirtualNetworkVirtualNetworkConstraint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TapiVirtualNetworkVirtualNetworkConstraint) UnmarshalBinary(b []byte) error {
	var res TapiVirtualNetworkVirtualNetworkConstraint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
