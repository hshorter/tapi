// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TapiEthEthMepSink tapi eth eth mep sink
// swagger:model tapi.eth.EthMepSink
type TapiEthEthMepSink struct {

	// This attribute models the MI_AIS_Period signal defined in G.8021 and configured as specified in G8051. It is the frequency at which the AIS messages should be sent.
	//                     range of type : 1s, 1min
	AisPeriod TapiEthOamPeriod `json:"ais-period,omitempty"`

	// This attribute models the MI_AIS_Pri signal defined in G.8021 and configured as specified in G8051. It is the priority at which the AIS messages should be sent.
	AisPriority *int32 `json:"ais-priority,omitempty"`

	// This attribute models the content of the bandwidth report received by the MEP Sink from the peer MEP Source.
	BandwidthReport *TapiEthBandwidthReport `json:"bandwidth-report,omitempty"`

	// This attribute indicates the list of 1DM priorities for the MepSink.
	Dm1Priority []int32 `json:"dm-1-priority"`

	// This attribute models the MI_CSFrdifdiEnable signal defined in G.8021 and configured as specified in G8051.
	IsCsfRdiFdiEnabled *bool `json:"is-csf-rdi-fdi-enabled,omitempty"`

	// This attribute models the MI_CSF_Reported signal defined in G.8021 and configured as specified in G8051. It configures whether the secondary failure CSF should be reported or not.
	IsCsfReported *bool `json:"is-csf-reported,omitempty"`

	// This attribute defines the threshold for declaring a 'bad second'. See also section 'Degraded signal defect (dDEG)' in G.8021.
	LmDegThr *int32 `json:"lm-deg-thr,omitempty"`

	// This attribute defines the number of consecutive bad seconds necessary for the 'degraded' detection. See also section 'Degraded signal defect (dDEG)' in G.8021.
	LmDegm *int32 `json:"lm-degm,omitempty"`

	// This attribute defines the number of consecutive good seconds necessary for the clearing of 'degraded'. See also section 'Degraded signal defect (dDEG)' in G.8021.
	LmM *int32 `json:"lm-m,omitempty"`

	// This attribute defines the necessary number of transmitted frames to enable the detection of 'bad seconds'. See also section 'Degraded signal defect (dDEG)' in G.8021.
	LmTfMin int32 `json:"lm-tf-min,omitempty"`
}

// Validate validates this tapi eth eth mep sink
func (m *TapiEthEthMepSink) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAisPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBandwidthReport(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TapiEthEthMepSink) validateAisPeriod(formats strfmt.Registry) error {

	if swag.IsZero(m.AisPeriod) { // not required
		return nil
	}

	if err := m.AisPeriod.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ais-period")
		}
		return err
	}

	return nil
}

func (m *TapiEthEthMepSink) validateBandwidthReport(formats strfmt.Registry) error {

	if swag.IsZero(m.BandwidthReport) { // not required
		return nil
	}

	if m.BandwidthReport != nil {
		if err := m.BandwidthReport.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bandwidth-report")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TapiEthEthMepSink) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TapiEthEthMepSink) UnmarshalBinary(b []byte) error {
	var res TapiEthEthMepSink
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
