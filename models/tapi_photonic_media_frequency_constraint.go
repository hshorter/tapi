// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TapiPhotonicMediaFrequencyConstraint tapi photonic media frequency constraint
// swagger:model tapi.photonic.media.FrequencyConstraint
type TapiPhotonicMediaFrequencyConstraint struct {

	// Adjustment granularity in Gigahertz. As per ITU-T G.694.1, it is used to calculate nominal central frequency (in THz)
	AdjustmentGranularity TapiPhotonicMediaAdjustmentGranularity `json:"adjustment-granularity,omitempty"`

	// Specifies the frequency grid standard used to determine the nominal central frequency and frequency slot width
	GridType TapiPhotonicMediaGridType `json:"grid-type,omitempty"`
}

// Validate validates this tapi photonic media frequency constraint
func (m *TapiPhotonicMediaFrequencyConstraint) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdjustmentGranularity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGridType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TapiPhotonicMediaFrequencyConstraint) validateAdjustmentGranularity(formats strfmt.Registry) error {

	if swag.IsZero(m.AdjustmentGranularity) { // not required
		return nil
	}

	if err := m.AdjustmentGranularity.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("adjustment-granularity")
		}
		return err
	}

	return nil
}

func (m *TapiPhotonicMediaFrequencyConstraint) validateGridType(formats strfmt.Registry) error {

	if swag.IsZero(m.GridType) { // not required
		return nil
	}

	if err := m.GridType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("grid-type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TapiPhotonicMediaFrequencyConstraint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TapiPhotonicMediaFrequencyConstraint) UnmarshalBinary(b []byte) error {
	var res TapiPhotonicMediaFrequencyConstraint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
