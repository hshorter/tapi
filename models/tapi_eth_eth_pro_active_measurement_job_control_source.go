// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TapiEthEthProActiveMeasurementJobControlSource tapi eth eth pro active measurement job control source
// swagger:model tapi.eth.EthProActiveMeasurementJobControlSource
type TapiEthEthProActiveMeasurementJobControlSource struct {

	// none
	ControllerMepID string `json:"controller-mep-id,omitempty"`

	// This parameter provides the size of the optional data TLV.
	//                     Non-negative integer represents the number of bytes for the length of the padding TLV.
	//                     Notes:
	//                     When configuring this parameter one should be aware of the maximum allowed total frame size limitation.
	//                     The attribute is not used in case of 2-way loss measurement.
	//                     range of type : Depends on the allowed MTU size.
	DataTlvLength int32 `json:"data-tlv-length,omitempty"`

	// This attribute provides the Unicast MAC address of the intented destination.
	DestinationAddress string `json:"destination-address,omitempty"`

	// This attribute identifies the state of the measurement job. If set to TRUE, the MEP performs proactive Performance Measurement.
	IsEnabled *bool `json:"is-enabled,omitempty"`

	// This attribute indicates the period (frequency) of the measurement frame transmission.
	//                     range of type : 100ms, 1s, 10s
	Period TapiEthOamPeriod `json:"period,omitempty"`

	// This attribute contains the priority value on which the MEP performs the measurement. When the measurement is enabled, the MEP should use this value to encode the priority of generated measurement frames. The EMF usese this value to assign the P parameter of the measurement operation.
	Priority *int32 `json:"priority,omitempty"`

	// This attribute is used to distinguish each measurement session if multiple measurement sessions are simultaneously activated towards a peer MEP including concurrent on-demand and proactive tests. It must be unique at least within the context of any measurement type for the MEG and initiating MEP.
	//                     Note: The attribute is not used in case of 2-way loss measurement.
	//                     range of type : 0..(2^32) - 1
	TestIdentifier int32 `json:"test-identifier,omitempty"`
}

// Validate validates this tapi eth eth pro active measurement job control source
func (m *TapiEthEthProActiveMeasurementJobControlSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePeriod(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TapiEthEthProActiveMeasurementJobControlSource) validatePeriod(formats strfmt.Registry) error {

	if swag.IsZero(m.Period) { // not required
		return nil
	}

	if err := m.Period.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("period")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TapiEthEthProActiveMeasurementJobControlSource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TapiEthEthProActiveMeasurementJobControlSource) UnmarshalBinary(b []byte) error {
	var res TapiEthEthProActiveMeasurementJobControlSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
