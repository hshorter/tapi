// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TapiNotificationNotificationContext tapi notification notification context
// swagger:model tapi.notification.NotificationContext
type TapiNotificationNotificationContext struct {

	// none
	NotifSubscription []*TapiNotificationNotificationSubscriptionService `json:"notif-subscription"`

	// none
	Notification []*TapiNotificationNotification `json:"notification"`
}

// Validate validates this tapi notification notification context
func (m *TapiNotificationNotificationContext) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNotifSubscription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotification(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TapiNotificationNotificationContext) validateNotifSubscription(formats strfmt.Registry) error {

	if swag.IsZero(m.NotifSubscription) { // not required
		return nil
	}

	for i := 0; i < len(m.NotifSubscription); i++ {
		if swag.IsZero(m.NotifSubscription[i]) { // not required
			continue
		}

		if m.NotifSubscription[i] != nil {
			if err := m.NotifSubscription[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("notif-subscription" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TapiNotificationNotificationContext) validateNotification(formats strfmt.Registry) error {

	if swag.IsZero(m.Notification) { // not required
		return nil
	}

	for i := 0; i < len(m.Notification); i++ {
		if swag.IsZero(m.Notification[i]) { // not required
			continue
		}

		if m.Notification[i] != nil {
			if err := m.Notification[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("notification" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TapiNotificationNotificationContext) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TapiNotificationNotificationContext) UnmarshalBinary(b []byte) error {
	var res TapiNotificationNotificationContext
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
