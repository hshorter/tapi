// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TapiPhotonicMediaMediaChannelPoolCapabilityPac tapi photonic media media channel pool capability pac
// swagger:model tapi.photonic.media.MediaChannelPoolCapabilityPac
type TapiPhotonicMediaMediaChannelPoolCapabilityPac struct {

	// none
	AvailableSpectrum []*TapiPhotonicMediaSpectrumBand `json:"available-spectrum"`

	// none
	OccupiedSpectrum []*TapiPhotonicMediaSpectrumBand `json:"occupied-spectrum"`

	// none
	SupportableSpectrum []*TapiPhotonicMediaSpectrumBand `json:"supportable-spectrum"`
}

// Validate validates this tapi photonic media media channel pool capability pac
func (m *TapiPhotonicMediaMediaChannelPoolCapabilityPac) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailableSpectrum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOccupiedSpectrum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupportableSpectrum(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TapiPhotonicMediaMediaChannelPoolCapabilityPac) validateAvailableSpectrum(formats strfmt.Registry) error {

	if swag.IsZero(m.AvailableSpectrum) { // not required
		return nil
	}

	for i := 0; i < len(m.AvailableSpectrum); i++ {
		if swag.IsZero(m.AvailableSpectrum[i]) { // not required
			continue
		}

		if m.AvailableSpectrum[i] != nil {
			if err := m.AvailableSpectrum[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("available-spectrum" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TapiPhotonicMediaMediaChannelPoolCapabilityPac) validateOccupiedSpectrum(formats strfmt.Registry) error {

	if swag.IsZero(m.OccupiedSpectrum) { // not required
		return nil
	}

	for i := 0; i < len(m.OccupiedSpectrum); i++ {
		if swag.IsZero(m.OccupiedSpectrum[i]) { // not required
			continue
		}

		if m.OccupiedSpectrum[i] != nil {
			if err := m.OccupiedSpectrum[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("occupied-spectrum" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TapiPhotonicMediaMediaChannelPoolCapabilityPac) validateSupportableSpectrum(formats strfmt.Registry) error {

	if swag.IsZero(m.SupportableSpectrum) { // not required
		return nil
	}

	for i := 0; i < len(m.SupportableSpectrum); i++ {
		if swag.IsZero(m.SupportableSpectrum[i]) { // not required
			continue
		}

		if m.SupportableSpectrum[i] != nil {
			if err := m.SupportableSpectrum[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("supportable-spectrum" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TapiPhotonicMediaMediaChannelPoolCapabilityPac) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TapiPhotonicMediaMediaChannelPoolCapabilityPac) UnmarshalBinary(b []byte) error {
	var res TapiPhotonicMediaMediaChannelPoolCapabilityPac
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
