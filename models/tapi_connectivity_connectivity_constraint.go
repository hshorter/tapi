// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TapiConnectivityConnectivityConstraint tapi connectivity connectivity constraint
// swagger:model tapi.connectivity.ConnectivityConstraint
type TapiConnectivityConnectivityConstraint struct {

	// none
	ConnectivityDirection TapiCommonForwardingDirection `json:"connectivity-direction,omitempty"`

	// none
	CorouteInclusion *TapiConnectivityConnectivityServiceRef `json:"coroute-inclusion,omitempty"`

	// none
	DiversityExclusion []*TapiConnectivityConnectivityServiceRef `json:"diversity-exclusion"`

	// none
	RequestedCapacity *TapiCommonCapacity `json:"requested-capacity,omitempty"`

	// none
	Schedule *TapiCommonTimeRange `json:"schedule,omitempty"`

	// none
	ServiceLayer TapiCommonLayerProtocolName `json:"service-layer,omitempty"`

	// An abstract value the meaning of which is mutually agreed â€“ typically represents metrics such as - Class of service, priority, resiliency, availability
	ServiceLevel string `json:"service-level,omitempty"`

	// none
	ServiceType TapiConnectivityServiceType `json:"service-type,omitempty"`
}

// Validate validates this tapi connectivity connectivity constraint
func (m *TapiConnectivityConnectivityConstraint) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnectivityDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCorouteInclusion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiversityExclusion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestedCapacity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchedule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceLayer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TapiConnectivityConnectivityConstraint) validateConnectivityDirection(formats strfmt.Registry) error {

	if swag.IsZero(m.ConnectivityDirection) { // not required
		return nil
	}

	if err := m.ConnectivityDirection.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("connectivity-direction")
		}
		return err
	}

	return nil
}

func (m *TapiConnectivityConnectivityConstraint) validateCorouteInclusion(formats strfmt.Registry) error {

	if swag.IsZero(m.CorouteInclusion) { // not required
		return nil
	}

	if m.CorouteInclusion != nil {
		if err := m.CorouteInclusion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("coroute-inclusion")
			}
			return err
		}
	}

	return nil
}

func (m *TapiConnectivityConnectivityConstraint) validateDiversityExclusion(formats strfmt.Registry) error {

	if swag.IsZero(m.DiversityExclusion) { // not required
		return nil
	}

	for i := 0; i < len(m.DiversityExclusion); i++ {
		if swag.IsZero(m.DiversityExclusion[i]) { // not required
			continue
		}

		if m.DiversityExclusion[i] != nil {
			if err := m.DiversityExclusion[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("diversity-exclusion" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TapiConnectivityConnectivityConstraint) validateRequestedCapacity(formats strfmt.Registry) error {

	if swag.IsZero(m.RequestedCapacity) { // not required
		return nil
	}

	if m.RequestedCapacity != nil {
		if err := m.RequestedCapacity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("requested-capacity")
			}
			return err
		}
	}

	return nil
}

func (m *TapiConnectivityConnectivityConstraint) validateSchedule(formats strfmt.Registry) error {

	if swag.IsZero(m.Schedule) { // not required
		return nil
	}

	if m.Schedule != nil {
		if err := m.Schedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schedule")
			}
			return err
		}
	}

	return nil
}

func (m *TapiConnectivityConnectivityConstraint) validateServiceLayer(formats strfmt.Registry) error {

	if swag.IsZero(m.ServiceLayer) { // not required
		return nil
	}

	if err := m.ServiceLayer.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("service-layer")
		}
		return err
	}

	return nil
}

func (m *TapiConnectivityConnectivityConstraint) validateServiceType(formats strfmt.Registry) error {

	if swag.IsZero(m.ServiceType) { // not required
		return nil
	}

	if err := m.ServiceType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("service-type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TapiConnectivityConnectivityConstraint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TapiConnectivityConnectivityConstraint) UnmarshalBinary(b []byte) error {
	var res TapiConnectivityConnectivityConstraint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
