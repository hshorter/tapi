// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TapiOamOamServiceEndPoint tapi oam oam service end point
// swagger:model tapi.oam.OamServiceEndPoint
type TapiOamOamServiceEndPoint struct {
	TapiCommonAdminStatePac

	TapiCommonLocalClass

	// none
	ConnectivityServiceEndPoint *TapiConnectivityConnectivityServiceEndPointRef `json:"connectivity-service-end-point,omitempty"`

	// none
	Direction TapiCommonPortDirection `json:"direction,omitempty"`

	// none
	LayerProtocolName TapiCommonLayerProtocolName `json:"layer-protocol-name,omitempty"`

	// none
	Mep *TapiOamMepRef `json:"mep,omitempty"`

	// This attribute contains the identifier of the MEP.
	//                     This attribute is empty in case the OSEP relates to the provisioing of an MIP.
	//
	MepIdentifier string `json:"mep-identifier,omitempty"`

	// none
	Mip *TapiOamMipRef `json:"mip,omitempty"`

	// This attribute models the MI_PeerMEP_ID[i] defined in G.8021 and configured as specified in G.8051. It provides the identifiers of the MEPs which are peer to the subject MEP.
	//                     This attribute is not specified in case the OSEP relates to the provisioing of an MIP.
	//                     In case of P2P, there is only one peer
	PeerMepIdentifier []string `json:"peer-mep-identifier"`

	// none
	ServiceInterfacePoint *TapiCommonServiceInterfacePointRef `json:"service-interface-point,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TapiOamOamServiceEndPoint) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 TapiCommonAdminStatePac
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.TapiCommonAdminStatePac = aO0

	// AO1
	var aO1 TapiCommonLocalClass
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.TapiCommonLocalClass = aO1

	// AO2
	var dataAO2 struct {
		ConnectivityServiceEndPoint *TapiConnectivityConnectivityServiceEndPointRef `json:"connectivity-service-end-point,omitempty"`

		Direction TapiCommonPortDirection `json:"direction,omitempty"`

		LayerProtocolName TapiCommonLayerProtocolName `json:"layer-protocol-name,omitempty"`

		Mep *TapiOamMepRef `json:"mep,omitempty"`

		MepIdentifier string `json:"mep-identifier,omitempty"`

		Mip *TapiOamMipRef `json:"mip,omitempty"`

		PeerMepIdentifier []string `json:"peer-mep-identifier"`

		ServiceInterfacePoint *TapiCommonServiceInterfacePointRef `json:"service-interface-point,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO2); err != nil {
		return err
	}

	m.ConnectivityServiceEndPoint = dataAO2.ConnectivityServiceEndPoint

	m.Direction = dataAO2.Direction

	m.LayerProtocolName = dataAO2.LayerProtocolName

	m.Mep = dataAO2.Mep

	m.MepIdentifier = dataAO2.MepIdentifier

	m.Mip = dataAO2.Mip

	m.PeerMepIdentifier = dataAO2.PeerMepIdentifier

	m.ServiceInterfacePoint = dataAO2.ServiceInterfacePoint

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TapiOamOamServiceEndPoint) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 3)

	aO0, err := swag.WriteJSON(m.TapiCommonAdminStatePac)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.TapiCommonLocalClass)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)

	var dataAO2 struct {
		ConnectivityServiceEndPoint *TapiConnectivityConnectivityServiceEndPointRef `json:"connectivity-service-end-point,omitempty"`

		Direction TapiCommonPortDirection `json:"direction,omitempty"`

		LayerProtocolName TapiCommonLayerProtocolName `json:"layer-protocol-name,omitempty"`

		Mep *TapiOamMepRef `json:"mep,omitempty"`

		MepIdentifier string `json:"mep-identifier,omitempty"`

		Mip *TapiOamMipRef `json:"mip,omitempty"`

		PeerMepIdentifier []string `json:"peer-mep-identifier"`

		ServiceInterfacePoint *TapiCommonServiceInterfacePointRef `json:"service-interface-point,omitempty"`
	}

	dataAO2.ConnectivityServiceEndPoint = m.ConnectivityServiceEndPoint

	dataAO2.Direction = m.Direction

	dataAO2.LayerProtocolName = m.LayerProtocolName

	dataAO2.Mep = m.Mep

	dataAO2.MepIdentifier = m.MepIdentifier

	dataAO2.Mip = m.Mip

	dataAO2.PeerMepIdentifier = m.PeerMepIdentifier

	dataAO2.ServiceInterfacePoint = m.ServiceInterfacePoint

	jsonDataAO2, errAO2 := swag.WriteJSON(dataAO2)
	if errAO2 != nil {
		return nil, errAO2
	}
	_parts = append(_parts, jsonDataAO2)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this tapi oam oam service end point
func (m *TapiOamOamServiceEndPoint) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with TapiCommonAdminStatePac
	if err := m.TapiCommonAdminStatePac.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with TapiCommonLocalClass
	if err := m.TapiCommonLocalClass.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnectivityServiceEndPoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLayerProtocolName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMep(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMip(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceInterfacePoint(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TapiOamOamServiceEndPoint) validateConnectivityServiceEndPoint(formats strfmt.Registry) error {

	if swag.IsZero(m.ConnectivityServiceEndPoint) { // not required
		return nil
	}

	if m.ConnectivityServiceEndPoint != nil {
		if err := m.ConnectivityServiceEndPoint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connectivity-service-end-point")
			}
			return err
		}
	}

	return nil
}

func (m *TapiOamOamServiceEndPoint) validateDirection(formats strfmt.Registry) error {

	if swag.IsZero(m.Direction) { // not required
		return nil
	}

	if err := m.Direction.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("direction")
		}
		return err
	}

	return nil
}

func (m *TapiOamOamServiceEndPoint) validateLayerProtocolName(formats strfmt.Registry) error {

	if swag.IsZero(m.LayerProtocolName) { // not required
		return nil
	}

	if err := m.LayerProtocolName.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("layer-protocol-name")
		}
		return err
	}

	return nil
}

func (m *TapiOamOamServiceEndPoint) validateMep(formats strfmt.Registry) error {

	if swag.IsZero(m.Mep) { // not required
		return nil
	}

	if m.Mep != nil {
		if err := m.Mep.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mep")
			}
			return err
		}
	}

	return nil
}

func (m *TapiOamOamServiceEndPoint) validateMip(formats strfmt.Registry) error {

	if swag.IsZero(m.Mip) { // not required
		return nil
	}

	if m.Mip != nil {
		if err := m.Mip.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mip")
			}
			return err
		}
	}

	return nil
}

func (m *TapiOamOamServiceEndPoint) validateServiceInterfacePoint(formats strfmt.Registry) error {

	if swag.IsZero(m.ServiceInterfacePoint) { // not required
		return nil
	}

	if m.ServiceInterfacePoint != nil {
		if err := m.ServiceInterfacePoint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("service-interface-point")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TapiOamOamServiceEndPoint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TapiOamOamServiceEndPoint) UnmarshalBinary(b []byte) error {
	var res TapiOamOamServiceEndPoint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
