// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TapiNotificationNotificationSubscriptionService tapi notification notification subscription service
// swagger:model tapi.notification.NotificationSubscriptionService
type TapiNotificationNotificationSubscriptionService struct {
	TapiCommonGlobalClass

	// none
	Notification []*TapiNotificationNotification `json:"notification"`

	// none
	NotificationChannel *TapiNotificationNotificationChannel `json:"notification-channel,omitempty"`

	// none
	SubscriptionFilter *TapiNotificationSubscriptionFilter `json:"subscription-filter,omitempty"`

	// none
	SubscriptionState TapiNotificationSubscriptionState `json:"subscription-state,omitempty"`

	// none
	SupportedNotificationTypes []TapiNotificationNotificationType `json:"supported-notification-types"`

	// none
	SupportedObjectTypes []TapiNotificationObjectType `json:"supported-object-types"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TapiNotificationNotificationSubscriptionService) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 TapiCommonGlobalClass
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.TapiCommonGlobalClass = aO0

	// AO1
	var dataAO1 struct {
		Notification []*TapiNotificationNotification `json:"notification"`

		NotificationChannel *TapiNotificationNotificationChannel `json:"notification-channel,omitempty"`

		SubscriptionFilter *TapiNotificationSubscriptionFilter `json:"subscription-filter,omitempty"`

		SubscriptionState TapiNotificationSubscriptionState `json:"subscription-state,omitempty"`

		SupportedNotificationTypes []TapiNotificationNotificationType `json:"supported-notification-types"`

		SupportedObjectTypes []TapiNotificationObjectType `json:"supported-object-types"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Notification = dataAO1.Notification

	m.NotificationChannel = dataAO1.NotificationChannel

	m.SubscriptionFilter = dataAO1.SubscriptionFilter

	m.SubscriptionState = dataAO1.SubscriptionState

	m.SupportedNotificationTypes = dataAO1.SupportedNotificationTypes

	m.SupportedObjectTypes = dataAO1.SupportedObjectTypes

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TapiNotificationNotificationSubscriptionService) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.TapiCommonGlobalClass)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		Notification []*TapiNotificationNotification `json:"notification"`

		NotificationChannel *TapiNotificationNotificationChannel `json:"notification-channel,omitempty"`

		SubscriptionFilter *TapiNotificationSubscriptionFilter `json:"subscription-filter,omitempty"`

		SubscriptionState TapiNotificationSubscriptionState `json:"subscription-state,omitempty"`

		SupportedNotificationTypes []TapiNotificationNotificationType `json:"supported-notification-types"`

		SupportedObjectTypes []TapiNotificationObjectType `json:"supported-object-types"`
	}

	dataAO1.Notification = m.Notification

	dataAO1.NotificationChannel = m.NotificationChannel

	dataAO1.SubscriptionFilter = m.SubscriptionFilter

	dataAO1.SubscriptionState = m.SubscriptionState

	dataAO1.SupportedNotificationTypes = m.SupportedNotificationTypes

	dataAO1.SupportedObjectTypes = m.SupportedObjectTypes

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this tapi notification notification subscription service
func (m *TapiNotificationNotificationSubscriptionService) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with TapiCommonGlobalClass
	if err := m.TapiCommonGlobalClass.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotification(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotificationChannel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscriptionFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscriptionState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupportedNotificationTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupportedObjectTypes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TapiNotificationNotificationSubscriptionService) validateNotification(formats strfmt.Registry) error {

	if swag.IsZero(m.Notification) { // not required
		return nil
	}

	for i := 0; i < len(m.Notification); i++ {
		if swag.IsZero(m.Notification[i]) { // not required
			continue
		}

		if m.Notification[i] != nil {
			if err := m.Notification[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("notification" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TapiNotificationNotificationSubscriptionService) validateNotificationChannel(formats strfmt.Registry) error {

	if swag.IsZero(m.NotificationChannel) { // not required
		return nil
	}

	if m.NotificationChannel != nil {
		if err := m.NotificationChannel.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("notification-channel")
			}
			return err
		}
	}

	return nil
}

func (m *TapiNotificationNotificationSubscriptionService) validateSubscriptionFilter(formats strfmt.Registry) error {

	if swag.IsZero(m.SubscriptionFilter) { // not required
		return nil
	}

	if m.SubscriptionFilter != nil {
		if err := m.SubscriptionFilter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subscription-filter")
			}
			return err
		}
	}

	return nil
}

func (m *TapiNotificationNotificationSubscriptionService) validateSubscriptionState(formats strfmt.Registry) error {

	if swag.IsZero(m.SubscriptionState) { // not required
		return nil
	}

	if err := m.SubscriptionState.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("subscription-state")
		}
		return err
	}

	return nil
}

func (m *TapiNotificationNotificationSubscriptionService) validateSupportedNotificationTypes(formats strfmt.Registry) error {

	if swag.IsZero(m.SupportedNotificationTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.SupportedNotificationTypes); i++ {

		if err := m.SupportedNotificationTypes[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("supported-notification-types" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *TapiNotificationNotificationSubscriptionService) validateSupportedObjectTypes(formats strfmt.Registry) error {

	if swag.IsZero(m.SupportedObjectTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.SupportedObjectTypes); i++ {

		if err := m.SupportedObjectTypes[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("supported-object-types" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TapiNotificationNotificationSubscriptionService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TapiNotificationNotificationSubscriptionService) UnmarshalBinary(b []byte) error {
	var res TapiNotificationNotificationSubscriptionService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
