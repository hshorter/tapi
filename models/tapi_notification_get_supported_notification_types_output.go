// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TapiNotificationGetSupportedNotificationTypesOutput tapi notification get supported notification types output
// swagger:model tapi.notification.GetSupportedNotificationTypesOutput
type TapiNotificationGetSupportedNotificationTypesOutput struct {

	// output
	Output *TapiNotificationGetSupportedNotificationTypesOutputOutput `json:"output,omitempty"`
}

// Validate validates this tapi notification get supported notification types output
func (m *TapiNotificationGetSupportedNotificationTypesOutput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOutput(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TapiNotificationGetSupportedNotificationTypesOutput) validateOutput(formats strfmt.Registry) error {

	if swag.IsZero(m.Output) { // not required
		return nil
	}

	if m.Output != nil {
		if err := m.Output.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("output")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TapiNotificationGetSupportedNotificationTypesOutput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TapiNotificationGetSupportedNotificationTypesOutput) UnmarshalBinary(b []byte) error {
	var res TapiNotificationGetSupportedNotificationTypesOutput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TapiNotificationGetSupportedNotificationTypesOutputOutput tapi notification get supported notification types output output
// swagger:model TapiNotificationGetSupportedNotificationTypesOutputOutput
type TapiNotificationGetSupportedNotificationTypesOutputOutput struct {

	// none
	SupportedNotificationTypes []TapiNotificationNotificationType `json:"supported-notification-types"`

	// none
	SupportedObjectTypes []TapiNotificationObjectType `json:"supported-object-types"`
}

// Validate validates this tapi notification get supported notification types output output
func (m *TapiNotificationGetSupportedNotificationTypesOutputOutput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSupportedNotificationTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupportedObjectTypes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TapiNotificationGetSupportedNotificationTypesOutputOutput) validateSupportedNotificationTypes(formats strfmt.Registry) error {

	if swag.IsZero(m.SupportedNotificationTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.SupportedNotificationTypes); i++ {

		if err := m.SupportedNotificationTypes[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("output" + "." + "supported-notification-types" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *TapiNotificationGetSupportedNotificationTypesOutputOutput) validateSupportedObjectTypes(formats strfmt.Registry) error {

	if swag.IsZero(m.SupportedObjectTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.SupportedObjectTypes); i++ {

		if err := m.SupportedObjectTypes[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("output" + "." + "supported-object-types" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TapiNotificationGetSupportedNotificationTypesOutputOutput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TapiNotificationGetSupportedNotificationTypesOutputOutput) UnmarshalBinary(b []byte) error {
	var res TapiNotificationGetSupportedNotificationTypesOutputOutput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
