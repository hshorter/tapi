// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TapiPhotonicMediaOtsiCapabilityPac tapi photonic media otsi capability pac
// swagger:model tapi.photonic.media.OtsiCapabilityPac
type TapiPhotonicMediaOtsiCapabilityPac struct {

	// The list of supportable ApplicationIdentifiers.
	SupportableApplicationIdentifier []*TapiPhotonicMediaApplicationIdentifier `json:"supportable-application-identifier"`

	// The lower frequency of the channel spectrum
	SupportableLowerCentralFrequency []*TapiPhotonicMediaCentralFrequency `json:"supportable-lower-central-frequency"`

	// This parameter defines the modulation used at the source
	SupportableModulation []TapiPhotonicMediaModulationTechnique `json:"supportable-modulation"`

	// The Upper frequency of the channel spectrum
	SupportableUpperCentralFrequency []*TapiPhotonicMediaCentralFrequency `json:"supportable-upper-central-frequency"`

	// none
	TotalPowerWarnThreshold *TapiPhotonicMediaTotalPowerThresholdPac `json:"total-power-warn-threshold,omitempty"`
}

// Validate validates this tapi photonic media otsi capability pac
func (m *TapiPhotonicMediaOtsiCapabilityPac) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSupportableApplicationIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupportableLowerCentralFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupportableModulation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupportableUpperCentralFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalPowerWarnThreshold(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TapiPhotonicMediaOtsiCapabilityPac) validateSupportableApplicationIdentifier(formats strfmt.Registry) error {

	if swag.IsZero(m.SupportableApplicationIdentifier) { // not required
		return nil
	}

	for i := 0; i < len(m.SupportableApplicationIdentifier); i++ {
		if swag.IsZero(m.SupportableApplicationIdentifier[i]) { // not required
			continue
		}

		if m.SupportableApplicationIdentifier[i] != nil {
			if err := m.SupportableApplicationIdentifier[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("supportable-application-identifier" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TapiPhotonicMediaOtsiCapabilityPac) validateSupportableLowerCentralFrequency(formats strfmt.Registry) error {

	if swag.IsZero(m.SupportableLowerCentralFrequency) { // not required
		return nil
	}

	for i := 0; i < len(m.SupportableLowerCentralFrequency); i++ {
		if swag.IsZero(m.SupportableLowerCentralFrequency[i]) { // not required
			continue
		}

		if m.SupportableLowerCentralFrequency[i] != nil {
			if err := m.SupportableLowerCentralFrequency[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("supportable-lower-central-frequency" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TapiPhotonicMediaOtsiCapabilityPac) validateSupportableModulation(formats strfmt.Registry) error {

	if swag.IsZero(m.SupportableModulation) { // not required
		return nil
	}

	for i := 0; i < len(m.SupportableModulation); i++ {

		if err := m.SupportableModulation[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("supportable-modulation" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *TapiPhotonicMediaOtsiCapabilityPac) validateSupportableUpperCentralFrequency(formats strfmt.Registry) error {

	if swag.IsZero(m.SupportableUpperCentralFrequency) { // not required
		return nil
	}

	for i := 0; i < len(m.SupportableUpperCentralFrequency); i++ {
		if swag.IsZero(m.SupportableUpperCentralFrequency[i]) { // not required
			continue
		}

		if m.SupportableUpperCentralFrequency[i] != nil {
			if err := m.SupportableUpperCentralFrequency[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("supportable-upper-central-frequency" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TapiPhotonicMediaOtsiCapabilityPac) validateTotalPowerWarnThreshold(formats strfmt.Registry) error {

	if swag.IsZero(m.TotalPowerWarnThreshold) { // not required
		return nil
	}

	if m.TotalPowerWarnThreshold != nil {
		if err := m.TotalPowerWarnThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("total-power-warn-threshold")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TapiPhotonicMediaOtsiCapabilityPac) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TapiPhotonicMediaOtsiCapabilityPac) UnmarshalBinary(b []byte) error {
	var res TapiPhotonicMediaOtsiCapabilityPac
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
