// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TapiEthEthProActive1wayMeasurementJob tapi eth eth pro active1way measurement job
// swagger:model tapi.eth.EthProActive1wayMeasurementJob
type TapiEthEthProActive1wayMeasurementJob struct {

	// none
	ProActiveControl1waySink *TapiEthEthProActiveMeasurementJobControlSink `json:"pro-active-control-1way-sink,omitempty"`

	// none
	ProActiveControl1waySource *TapiEthEthProActiveMeasurementJobControlSource `json:"pro-active-control-1way-source,omitempty"`
}

// Validate validates this tapi eth eth pro active1way measurement job
func (m *TapiEthEthProActive1wayMeasurementJob) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProActiveControl1waySink(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProActiveControl1waySource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TapiEthEthProActive1wayMeasurementJob) validateProActiveControl1waySink(formats strfmt.Registry) error {

	if swag.IsZero(m.ProActiveControl1waySink) { // not required
		return nil
	}

	if m.ProActiveControl1waySink != nil {
		if err := m.ProActiveControl1waySink.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pro-active-control-1way-sink")
			}
			return err
		}
	}

	return nil
}

func (m *TapiEthEthProActive1wayMeasurementJob) validateProActiveControl1waySource(formats strfmt.Registry) error {

	if swag.IsZero(m.ProActiveControl1waySource) { // not required
		return nil
	}

	if m.ProActiveControl1waySource != nil {
		if err := m.ProActiveControl1waySource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pro-active-control-1way-source")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TapiEthEthProActive1wayMeasurementJob) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TapiEthEthProActive1wayMeasurementJob) UnmarshalBinary(b []byte) error {
	var res TapiEthEthProActive1wayMeasurementJob
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
