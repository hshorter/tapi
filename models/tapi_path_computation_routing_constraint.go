// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TapiPathComputationRoutingConstraint tapi path computation routing constraint
// swagger:model tapi.path.computation.RoutingConstraint
type TapiPathComputationRoutingConstraint struct {

	// The list of costs where each cost relates to some aspect of the TopologicalEntity.
	CostCharacteristic []*TapiTopologyCostCharacteristic `json:"cost-characteristic"`

	// none
	DiversityPolicy TapiPathComputationDiversityPolicy `json:"diversity-policy,omitempty"`

	// To distinguish if the resources are to be exclusive to the service
	IsExclusive *bool `json:"is-exclusive,omitempty"`

	// The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.
	LatencyCharacteristic []*TapiTopologyLatencyCharacteristic `json:"latency-characteristic"`

	// none
	RiskDiversityCharacteristic []*TapiTopologyRiskCharacteristic `json:"risk-diversity-characteristic"`

	// none
	RouteDirection TapiCommonForwardingDirection `json:"route-direction,omitempty"`

	// none
	RouteObjectiveFunction TapiPathComputationRouteObjectiveFunction `json:"route-objective-function,omitempty"`
}

// Validate validates this tapi path computation routing constraint
func (m *TapiPathComputationRoutingConstraint) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCostCharacteristic(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiversityPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLatencyCharacteristic(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRiskDiversityCharacteristic(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouteDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouteObjectiveFunction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TapiPathComputationRoutingConstraint) validateCostCharacteristic(formats strfmt.Registry) error {

	if swag.IsZero(m.CostCharacteristic) { // not required
		return nil
	}

	for i := 0; i < len(m.CostCharacteristic); i++ {
		if swag.IsZero(m.CostCharacteristic[i]) { // not required
			continue
		}

		if m.CostCharacteristic[i] != nil {
			if err := m.CostCharacteristic[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cost-characteristic" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TapiPathComputationRoutingConstraint) validateDiversityPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.DiversityPolicy) { // not required
		return nil
	}

	if err := m.DiversityPolicy.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("diversity-policy")
		}
		return err
	}

	return nil
}

func (m *TapiPathComputationRoutingConstraint) validateLatencyCharacteristic(formats strfmt.Registry) error {

	if swag.IsZero(m.LatencyCharacteristic) { // not required
		return nil
	}

	for i := 0; i < len(m.LatencyCharacteristic); i++ {
		if swag.IsZero(m.LatencyCharacteristic[i]) { // not required
			continue
		}

		if m.LatencyCharacteristic[i] != nil {
			if err := m.LatencyCharacteristic[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("latency-characteristic" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TapiPathComputationRoutingConstraint) validateRiskDiversityCharacteristic(formats strfmt.Registry) error {

	if swag.IsZero(m.RiskDiversityCharacteristic) { // not required
		return nil
	}

	for i := 0; i < len(m.RiskDiversityCharacteristic); i++ {
		if swag.IsZero(m.RiskDiversityCharacteristic[i]) { // not required
			continue
		}

		if m.RiskDiversityCharacteristic[i] != nil {
			if err := m.RiskDiversityCharacteristic[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("risk-diversity-characteristic" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TapiPathComputationRoutingConstraint) validateRouteDirection(formats strfmt.Registry) error {

	if swag.IsZero(m.RouteDirection) { // not required
		return nil
	}

	if err := m.RouteDirection.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("route-direction")
		}
		return err
	}

	return nil
}

func (m *TapiPathComputationRoutingConstraint) validateRouteObjectiveFunction(formats strfmt.Registry) error {

	if swag.IsZero(m.RouteObjectiveFunction) { // not required
		return nil
	}

	if err := m.RouteObjectiveFunction.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("route-objective-function")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TapiPathComputationRoutingConstraint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TapiPathComputationRoutingConstraint) UnmarshalBinary(b []byte) error {
	var res TapiPathComputationRoutingConstraint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
