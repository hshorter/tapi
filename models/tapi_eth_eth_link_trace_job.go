// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TapiEthEthLinkTraceJob tapi eth eth link trace job
// swagger:model tapi.eth.EthLinkTraceJob
type TapiEthEthLinkTraceJob struct {

	// none
	EthLtMsg *TapiEthEthOamOperationCommonPac `json:"eth-lt-msg,omitempty"`

	// G.8052: This parameter provides the Time To Live (TTL) parameter of the Link Track protocol.
	//                     The TTL parameter allows the receiver (MIP or MEP) of the LTM frame to determine if the frame can be terminated. TTL is decremented every time the LTM frame is relayed. LTM frame with TTL<=1 is terminated and not relayed.
	TimeToLive int32 `json:"time-to-live,omitempty"`
}

// Validate validates this tapi eth eth link trace job
func (m *TapiEthEthLinkTraceJob) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEthLtMsg(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TapiEthEthLinkTraceJob) validateEthLtMsg(formats strfmt.Registry) error {

	if swag.IsZero(m.EthLtMsg) { // not required
		return nil
	}

	if m.EthLtMsg != nil {
		if err := m.EthLtMsg.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eth-lt-msg")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TapiEthEthLinkTraceJob) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TapiEthEthLinkTraceJob) UnmarshalBinary(b []byte) error {
	var res TapiEthEthLinkTraceJob
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
