// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TapiOamOamjobPmCurrentData tapi oam oamjob pm current data
// swagger:model tapi.oam.oamjob.PmCurrentData
type TapiOamOamjobPmCurrentData struct {
	TapiCommonLocalClass

	TapiEthPmCurrentDataAugmentation1

	TapiEthPmCurrentDataAugmentation10

	TapiEthPmCurrentDataAugmentation11

	TapiEthPmCurrentDataAugmentation2

	TapiEthPmCurrentDataAugmentation3

	TapiEthPmCurrentDataAugmentation4

	TapiEthPmCurrentDataAugmentation5

	TapiEthPmCurrentDataAugmentation6

	TapiEthPmCurrentDataAugmentation7

	TapiEthPmCurrentDataAugmentation8

	TapiEthPmCurrentDataAugmentation9

	// none
	ElapsedTime *TapiCommonTimeInterval `json:"elapsed-time,omitempty"`

	// none
	GranularityPeriod *TapiCommonTimePeriod `json:"granularity-period,omitempty"`

	// in case of 24hr Current Data, at least 1 History Data.
	//                     In case of 15min Current Data, at least 16 History Data.
	//                     In case of <15min, the number of History Data shall be able to cover a span of 4 hours.
	PmHistoryData []*TapiOamPmcurrentdataPmHistoryData `json:"pm-history-data"`

	// This attribute is used to indicate that the performance data for the current period may not be reliable. Some reasons for this to occur are:
	//                     – Suspect data were detected by the actual resource doing data collection.
	//                     – Transition of the administrativeState attribute to/from the 'lock' state.
	//                     – Transition of the operationalState to/from the 'disabled' state.
	//                     – Scheduler setting that inhibits the collection function.
	//                     – The performance counters were reset during the interval.
	//                     – The currentData (or subclass) object instance was created during the monitoring period.
	SuspectIntervalFlag *bool `json:"suspect-interval-flag,omitempty"`

	// This attribute indicates the start of the current monitoring interval.
	//                     The value is bound to the quarter of an hour in case of a 15 minute interval and bound to the hour in case of a 24 hour interval.
	Timestamp string `json:"timestamp,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TapiOamOamjobPmCurrentData) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 TapiCommonLocalClass
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.TapiCommonLocalClass = aO0

	// AO1
	var aO1 TapiEthPmCurrentDataAugmentation1
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.TapiEthPmCurrentDataAugmentation1 = aO1

	// AO2
	var aO2 TapiEthPmCurrentDataAugmentation10
	if err := swag.ReadJSON(raw, &aO2); err != nil {
		return err
	}
	m.TapiEthPmCurrentDataAugmentation10 = aO2

	// AO3
	var aO3 TapiEthPmCurrentDataAugmentation11
	if err := swag.ReadJSON(raw, &aO3); err != nil {
		return err
	}
	m.TapiEthPmCurrentDataAugmentation11 = aO3

	// AO4
	var aO4 TapiEthPmCurrentDataAugmentation2
	if err := swag.ReadJSON(raw, &aO4); err != nil {
		return err
	}
	m.TapiEthPmCurrentDataAugmentation2 = aO4

	// AO5
	var aO5 TapiEthPmCurrentDataAugmentation3
	if err := swag.ReadJSON(raw, &aO5); err != nil {
		return err
	}
	m.TapiEthPmCurrentDataAugmentation3 = aO5

	// AO6
	var aO6 TapiEthPmCurrentDataAugmentation4
	if err := swag.ReadJSON(raw, &aO6); err != nil {
		return err
	}
	m.TapiEthPmCurrentDataAugmentation4 = aO6

	// AO7
	var aO7 TapiEthPmCurrentDataAugmentation5
	if err := swag.ReadJSON(raw, &aO7); err != nil {
		return err
	}
	m.TapiEthPmCurrentDataAugmentation5 = aO7

	// AO8
	var aO8 TapiEthPmCurrentDataAugmentation6
	if err := swag.ReadJSON(raw, &aO8); err != nil {
		return err
	}
	m.TapiEthPmCurrentDataAugmentation6 = aO8

	// AO9
	var aO9 TapiEthPmCurrentDataAugmentation7
	if err := swag.ReadJSON(raw, &aO9); err != nil {
		return err
	}
	m.TapiEthPmCurrentDataAugmentation7 = aO9

	// AO10
	var aO10 TapiEthPmCurrentDataAugmentation8
	if err := swag.ReadJSON(raw, &aO10); err != nil {
		return err
	}
	m.TapiEthPmCurrentDataAugmentation8 = aO10

	// AO11
	var aO11 TapiEthPmCurrentDataAugmentation9
	if err := swag.ReadJSON(raw, &aO11); err != nil {
		return err
	}
	m.TapiEthPmCurrentDataAugmentation9 = aO11

	// AO12
	var dataAO12 struct {
		ElapsedTime *TapiCommonTimeInterval `json:"elapsed-time,omitempty"`

		GranularityPeriod *TapiCommonTimePeriod `json:"granularity-period,omitempty"`

		PmHistoryData []*TapiOamPmcurrentdataPmHistoryData `json:"pm-history-data"`

		SuspectIntervalFlag *bool `json:"suspect-interval-flag,omitempty"`

		Timestamp string `json:"timestamp,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO12); err != nil {
		return err
	}

	m.ElapsedTime = dataAO12.ElapsedTime

	m.GranularityPeriod = dataAO12.GranularityPeriod

	m.PmHistoryData = dataAO12.PmHistoryData

	m.SuspectIntervalFlag = dataAO12.SuspectIntervalFlag

	m.Timestamp = dataAO12.Timestamp

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TapiOamOamjobPmCurrentData) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 13)

	aO0, err := swag.WriteJSON(m.TapiCommonLocalClass)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.TapiEthPmCurrentDataAugmentation1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)

	aO2, err := swag.WriteJSON(m.TapiEthPmCurrentDataAugmentation10)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO2)

	aO3, err := swag.WriteJSON(m.TapiEthPmCurrentDataAugmentation11)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO3)

	aO4, err := swag.WriteJSON(m.TapiEthPmCurrentDataAugmentation2)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO4)

	aO5, err := swag.WriteJSON(m.TapiEthPmCurrentDataAugmentation3)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO5)

	aO6, err := swag.WriteJSON(m.TapiEthPmCurrentDataAugmentation4)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO6)

	aO7, err := swag.WriteJSON(m.TapiEthPmCurrentDataAugmentation5)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO7)

	aO8, err := swag.WriteJSON(m.TapiEthPmCurrentDataAugmentation6)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO8)

	aO9, err := swag.WriteJSON(m.TapiEthPmCurrentDataAugmentation7)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO9)

	aO10, err := swag.WriteJSON(m.TapiEthPmCurrentDataAugmentation8)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO10)

	aO11, err := swag.WriteJSON(m.TapiEthPmCurrentDataAugmentation9)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO11)

	var dataAO12 struct {
		ElapsedTime *TapiCommonTimeInterval `json:"elapsed-time,omitempty"`

		GranularityPeriod *TapiCommonTimePeriod `json:"granularity-period,omitempty"`

		PmHistoryData []*TapiOamPmcurrentdataPmHistoryData `json:"pm-history-data"`

		SuspectIntervalFlag *bool `json:"suspect-interval-flag,omitempty"`

		Timestamp string `json:"timestamp,omitempty"`
	}

	dataAO12.ElapsedTime = m.ElapsedTime

	dataAO12.GranularityPeriod = m.GranularityPeriod

	dataAO12.PmHistoryData = m.PmHistoryData

	dataAO12.SuspectIntervalFlag = m.SuspectIntervalFlag

	dataAO12.Timestamp = m.Timestamp

	jsonDataAO12, errAO12 := swag.WriteJSON(dataAO12)
	if errAO12 != nil {
		return nil, errAO12
	}
	_parts = append(_parts, jsonDataAO12)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this tapi oam oamjob pm current data
func (m *TapiOamOamjobPmCurrentData) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with TapiCommonLocalClass
	if err := m.TapiCommonLocalClass.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with TapiEthPmCurrentDataAugmentation1
	if err := m.TapiEthPmCurrentDataAugmentation1.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with TapiEthPmCurrentDataAugmentation10
	if err := m.TapiEthPmCurrentDataAugmentation10.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with TapiEthPmCurrentDataAugmentation11
	if err := m.TapiEthPmCurrentDataAugmentation11.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with TapiEthPmCurrentDataAugmentation2
	if err := m.TapiEthPmCurrentDataAugmentation2.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with TapiEthPmCurrentDataAugmentation3
	if err := m.TapiEthPmCurrentDataAugmentation3.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with TapiEthPmCurrentDataAugmentation4
	if err := m.TapiEthPmCurrentDataAugmentation4.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with TapiEthPmCurrentDataAugmentation5
	if err := m.TapiEthPmCurrentDataAugmentation5.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with TapiEthPmCurrentDataAugmentation6
	if err := m.TapiEthPmCurrentDataAugmentation6.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with TapiEthPmCurrentDataAugmentation7
	if err := m.TapiEthPmCurrentDataAugmentation7.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with TapiEthPmCurrentDataAugmentation8
	if err := m.TapiEthPmCurrentDataAugmentation8.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with TapiEthPmCurrentDataAugmentation9
	if err := m.TapiEthPmCurrentDataAugmentation9.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateElapsedTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGranularityPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePmHistoryData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TapiOamOamjobPmCurrentData) validateElapsedTime(formats strfmt.Registry) error {

	if swag.IsZero(m.ElapsedTime) { // not required
		return nil
	}

	if m.ElapsedTime != nil {
		if err := m.ElapsedTime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("elapsed-time")
			}
			return err
		}
	}

	return nil
}

func (m *TapiOamOamjobPmCurrentData) validateGranularityPeriod(formats strfmt.Registry) error {

	if swag.IsZero(m.GranularityPeriod) { // not required
		return nil
	}

	if m.GranularityPeriod != nil {
		if err := m.GranularityPeriod.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("granularity-period")
			}
			return err
		}
	}

	return nil
}

func (m *TapiOamOamjobPmCurrentData) validatePmHistoryData(formats strfmt.Registry) error {

	if swag.IsZero(m.PmHistoryData) { // not required
		return nil
	}

	for i := 0; i < len(m.PmHistoryData); i++ {
		if swag.IsZero(m.PmHistoryData[i]) { // not required
			continue
		}

		if m.PmHistoryData[i] != nil {
			if err := m.PmHistoryData[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pm-history-data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TapiOamOamjobPmCurrentData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TapiOamOamjobPmCurrentData) UnmarshalBinary(b []byte) error {
	var res TapiOamOamjobPmCurrentData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
