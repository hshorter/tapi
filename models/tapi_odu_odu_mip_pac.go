// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TapiOduOduMipPac tapi odu odu mip pac
// swagger:model tapi.odu.OduMipPac
type TapiOduOduMipPac struct {

	// The Trail Trace Identifier (TTI) information recovered (Accepted) from the TTI overhead position at the sink of a trail.
	Acti string `json:"acti,omitempty"`

	// This attribute indicates the threshold level for declaring a Degraded Signal defect (dDEG). A dDEG shall be declared if DegM consecutive bad PM Seconds are detected.
	DegM int32 `json:"deg-m,omitempty"`

	// This attribute indicates the threshold level for declaring a performance monitoring (PM) Second to be bad. The value of the threshold can be provisioned in terms of number of errored blocks or in terms of percentage of errored blocks. For percentage-based specification, in order to support provision of less than 1%, the specification consists of two fields. The first field indicates the granularity of percentage. For examples, in 1%, in 0.1%, or in 0.01%, etc. The second field indicates the multiple of the granularity. For number of errored block based, the value is a positive integer.
	DegThr *TapiOduDegThr `json:"deg-thr,omitempty"`

	// The Expected Destination Access Point Identifier (ExDAPI), provisioned by the managing system, to be compared with the TTI accepted at the overhead position of the sink for the purpose of checking the integrity of connectivity.
	ExDapi string `json:"ex-dapi,omitempty"`

	// The Expected Source Access Point Identifier (ExSAPI), provisioned by the managing system, to be compared with the TTI accepted at the overhead position of the sink for the purpose of checking the integrity of connectivity.
	//
	ExSapi string `json:"ex-sapi,omitempty"`

	// This attribute provides the control capability for the managing system to enable or disable the Consequent Action function when detecting Trace Identifier Mismatch (TIM) at the trail termination sink.
	TimActDisabled *bool `json:"tim-act-disabled,omitempty"`

	// This attribute indicates the mode of the Trace Identifier Mismatch (TIM) Detection function allowed values: OFF, SAPIonly, DAPIonly, SAPIandDAPI
	TimDetMode TapiOduTimDetMo `json:"tim-det-mode,omitempty"`
}

// Validate validates this tapi odu odu mip pac
func (m *TapiOduOduMipPac) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDegThr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimDetMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TapiOduOduMipPac) validateDegThr(formats strfmt.Registry) error {

	if swag.IsZero(m.DegThr) { // not required
		return nil
	}

	if m.DegThr != nil {
		if err := m.DegThr.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deg-thr")
			}
			return err
		}
	}

	return nil
}

func (m *TapiOduOduMipPac) validateTimDetMode(formats strfmt.Registry) error {

	if swag.IsZero(m.TimDetMode) { // not required
		return nil
	}

	if err := m.TimDetMode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("tim-det-mode")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TapiOduOduMipPac) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TapiOduOduMipPac) UnmarshalBinary(b []byte) error {
	var res TapiOduOduMipPac
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
