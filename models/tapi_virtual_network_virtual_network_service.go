// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TapiVirtualNetworkVirtualNetworkService tapi virtual network virtual network service
// swagger:model tapi.virtual.network.VirtualNetworkService
type TapiVirtualNetworkVirtualNetworkService struct {
	TapiCommonGlobalClass

	// none
	EndPoint []*TapiVirtualNetworkVirtualNetworkServiceEndPoint `json:"end-point"`

	// none
	LayerProtocolName []TapiCommonLayerProtocolName `json:"layer-protocol-name"`

	// none
	Schedule string `json:"schedule,omitempty"`

	// none
	State *TapiCommonAdminStatePac `json:"state,omitempty"`

	// none
	Topology *TapiTopologyTopologyRef `json:"topology,omitempty"`

	// none
	VnwConstraint []*TapiVirtualNetworkVirtualNetworkConstraint `json:"vnw-constraint"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TapiVirtualNetworkVirtualNetworkService) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 TapiCommonGlobalClass
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.TapiCommonGlobalClass = aO0

	// AO1
	var dataAO1 struct {
		EndPoint []*TapiVirtualNetworkVirtualNetworkServiceEndPoint `json:"end-point"`

		LayerProtocolName []TapiCommonLayerProtocolName `json:"layer-protocol-name"`

		Schedule string `json:"schedule,omitempty"`

		State *TapiCommonAdminStatePac `json:"state,omitempty"`

		Topology *TapiTopologyTopologyRef `json:"topology,omitempty"`

		VnwConstraint []*TapiVirtualNetworkVirtualNetworkConstraint `json:"vnw-constraint"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.EndPoint = dataAO1.EndPoint

	m.LayerProtocolName = dataAO1.LayerProtocolName

	m.Schedule = dataAO1.Schedule

	m.State = dataAO1.State

	m.Topology = dataAO1.Topology

	m.VnwConstraint = dataAO1.VnwConstraint

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TapiVirtualNetworkVirtualNetworkService) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.TapiCommonGlobalClass)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		EndPoint []*TapiVirtualNetworkVirtualNetworkServiceEndPoint `json:"end-point"`

		LayerProtocolName []TapiCommonLayerProtocolName `json:"layer-protocol-name"`

		Schedule string `json:"schedule,omitempty"`

		State *TapiCommonAdminStatePac `json:"state,omitempty"`

		Topology *TapiTopologyTopologyRef `json:"topology,omitempty"`

		VnwConstraint []*TapiVirtualNetworkVirtualNetworkConstraint `json:"vnw-constraint"`
	}

	dataAO1.EndPoint = m.EndPoint

	dataAO1.LayerProtocolName = m.LayerProtocolName

	dataAO1.Schedule = m.Schedule

	dataAO1.State = m.State

	dataAO1.Topology = m.Topology

	dataAO1.VnwConstraint = m.VnwConstraint

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this tapi virtual network virtual network service
func (m *TapiVirtualNetworkVirtualNetworkService) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with TapiCommonGlobalClass
	if err := m.TapiCommonGlobalClass.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndPoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLayerProtocolName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTopology(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVnwConstraint(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TapiVirtualNetworkVirtualNetworkService) validateEndPoint(formats strfmt.Registry) error {

	if swag.IsZero(m.EndPoint) { // not required
		return nil
	}

	for i := 0; i < len(m.EndPoint); i++ {
		if swag.IsZero(m.EndPoint[i]) { // not required
			continue
		}

		if m.EndPoint[i] != nil {
			if err := m.EndPoint[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("end-point" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TapiVirtualNetworkVirtualNetworkService) validateLayerProtocolName(formats strfmt.Registry) error {

	if swag.IsZero(m.LayerProtocolName) { // not required
		return nil
	}

	for i := 0; i < len(m.LayerProtocolName); i++ {

		if err := m.LayerProtocolName[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("layer-protocol-name" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *TapiVirtualNetworkVirtualNetworkService) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	if m.State != nil {
		if err := m.State.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

func (m *TapiVirtualNetworkVirtualNetworkService) validateTopology(formats strfmt.Registry) error {

	if swag.IsZero(m.Topology) { // not required
		return nil
	}

	if m.Topology != nil {
		if err := m.Topology.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("topology")
			}
			return err
		}
	}

	return nil
}

func (m *TapiVirtualNetworkVirtualNetworkService) validateVnwConstraint(formats strfmt.Registry) error {

	if swag.IsZero(m.VnwConstraint) { // not required
		return nil
	}

	for i := 0; i < len(m.VnwConstraint); i++ {
		if swag.IsZero(m.VnwConstraint[i]) { // not required
			continue
		}

		if m.VnwConstraint[i] != nil {
			if err := m.VnwConstraint[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vnw-constraint" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TapiVirtualNetworkVirtualNetworkService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TapiVirtualNetworkVirtualNetworkService) UnmarshalBinary(b []byte) error {
	var res TapiVirtualNetworkVirtualNetworkService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
