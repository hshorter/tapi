// Code generated by go-swagger; DO NOT EDIT.

package tapi_network_element

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostOperationsGetNetworkElementListHandlerFunc turns a function with the right signature into a post operations get network element list handler
type PostOperationsGetNetworkElementListHandlerFunc func(PostOperationsGetNetworkElementListParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostOperationsGetNetworkElementListHandlerFunc) Handle(params PostOperationsGetNetworkElementListParams) middleware.Responder {
	return fn(params)
}

// PostOperationsGetNetworkElementListHandler interface for that can handle valid post operations get network element list params
type PostOperationsGetNetworkElementListHandler interface {
	Handle(PostOperationsGetNetworkElementListParams) middleware.Responder
}

// NewPostOperationsGetNetworkElementList creates a new http.Handler for the post operations get network element list operation
func NewPostOperationsGetNetworkElementList(ctx *middleware.Context, handler PostOperationsGetNetworkElementListHandler) *PostOperationsGetNetworkElementList {
	return &PostOperationsGetNetworkElementList{Context: ctx, Handler: handler}
}

/*PostOperationsGetNetworkElementList swagger:route POST /operations/get-network-element-list/ tapi-network-element postOperationsGetNetworkElementList

PostOperationsGetNetworkElementList post operations get network element list API

*/
type PostOperationsGetNetworkElementList struct {
	Context *middleware.Context
	Handler PostOperationsGetNetworkElementListHandler
}

func (o *PostOperationsGetNetworkElementList) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostOperationsGetNetworkElementListParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
