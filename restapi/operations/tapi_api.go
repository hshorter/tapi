// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/damianoneill/tapi/restapi/operations/tapi_common"
	"github.com/damianoneill/tapi/restapi/operations/tapi_connectivity"
	"github.com/damianoneill/tapi/restapi/operations/tapi_notification"
	"github.com/damianoneill/tapi/restapi/operations/tapi_oam"
	"github.com/damianoneill/tapi/restapi/operations/tapi_path_computation"
	"github.com/damianoneill/tapi/restapi/operations/tapi_topology"
	"github.com/damianoneill/tapi/restapi/operations/tapi_virtual_network"
)

// NewTapiAPI creates a new Tapi instance
func NewTapiAPI(spec *loads.Document) *TapiAPI {
	return &TapiAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,
		JSONConsumer:        runtime.JSONConsumer(),
		JSONProducer:        runtime.JSONProducer(),
		TapiCommonGetDataContextHandler: tapi_common.GetDataContextHandlerFunc(func(params tapi_common.GetDataContextParams) middleware.Responder {
			return middleware.NotImplemented("operation TapiCommonGetDataContext has not yet been implemented")
		}),
		TapiCommonGetDataContextServiceInterfacePointUUIDHandler: tapi_common.GetDataContextServiceInterfacePointUUIDHandlerFunc(func(params tapi_common.GetDataContextServiceInterfacePointUUIDParams) middleware.Responder {
			return middleware.NotImplemented("operation TapiCommonGetDataContextServiceInterfacePointUUID has not yet been implemented")
		}),
		TapiPathComputationPostOperationsComputeP2PPathHandler: tapi_path_computation.PostOperationsComputeP2PPathHandlerFunc(func(params tapi_path_computation.PostOperationsComputeP2PPathParams) middleware.Responder {
			return middleware.NotImplemented("operation TapiPathComputationPostOperationsComputeP2PPath has not yet been implemented")
		}),
		TapiConnectivityPostOperationsCreateConnectivityServiceHandler: tapi_connectivity.PostOperationsCreateConnectivityServiceHandlerFunc(func(params tapi_connectivity.PostOperationsCreateConnectivityServiceParams) middleware.Responder {
			return middleware.NotImplemented("operation TapiConnectivityPostOperationsCreateConnectivityService has not yet been implemented")
		}),
		TapiNotificationPostOperationsCreateNotificationSubscriptionServiceHandler: tapi_notification.PostOperationsCreateNotificationSubscriptionServiceHandlerFunc(func(params tapi_notification.PostOperationsCreateNotificationSubscriptionServiceParams) middleware.Responder {
			return middleware.NotImplemented("operation TapiNotificationPostOperationsCreateNotificationSubscriptionService has not yet been implemented")
		}),
		TapiOamPostOperationsCreateOamJobHandler: tapi_oam.PostOperationsCreateOamJobHandlerFunc(func(params tapi_oam.PostOperationsCreateOamJobParams) middleware.Responder {
			return middleware.NotImplemented("operation TapiOamPostOperationsCreateOamJob has not yet been implemented")
		}),
		TapiOamPostOperationsCreateOamServiceHandler: tapi_oam.PostOperationsCreateOamServiceHandlerFunc(func(params tapi_oam.PostOperationsCreateOamServiceParams) middleware.Responder {
			return middleware.NotImplemented("operation TapiOamPostOperationsCreateOamService has not yet been implemented")
		}),
		TapiOamPostOperationsCreateOamServiceEndPointHandler: tapi_oam.PostOperationsCreateOamServiceEndPointHandlerFunc(func(params tapi_oam.PostOperationsCreateOamServiceEndPointParams) middleware.Responder {
			return middleware.NotImplemented("operation TapiOamPostOperationsCreateOamServiceEndPoint has not yet been implemented")
		}),
		TapiVirtualNetworkPostOperationsCreateVirtualNetworkServiceHandler: tapi_virtual_network.PostOperationsCreateVirtualNetworkServiceHandlerFunc(func(params tapi_virtual_network.PostOperationsCreateVirtualNetworkServiceParams) middleware.Responder {
			return middleware.NotImplemented("operation TapiVirtualNetworkPostOperationsCreateVirtualNetworkService has not yet been implemented")
		}),
		TapiConnectivityPostOperationsDeleteConnectivityServiceHandler: tapi_connectivity.PostOperationsDeleteConnectivityServiceHandlerFunc(func(params tapi_connectivity.PostOperationsDeleteConnectivityServiceParams) middleware.Responder {
			return middleware.NotImplemented("operation TapiConnectivityPostOperationsDeleteConnectivityService has not yet been implemented")
		}),
		TapiNotificationPostOperationsDeleteNotificationSubscriptionServiceHandler: tapi_notification.PostOperationsDeleteNotificationSubscriptionServiceHandlerFunc(func(params tapi_notification.PostOperationsDeleteNotificationSubscriptionServiceParams) middleware.Responder {
			return middleware.NotImplemented("operation TapiNotificationPostOperationsDeleteNotificationSubscriptionService has not yet been implemented")
		}),
		TapiOamPostOperationsDeleteOamJobHandler: tapi_oam.PostOperationsDeleteOamJobHandlerFunc(func(params tapi_oam.PostOperationsDeleteOamJobParams) middleware.Responder {
			return middleware.NotImplemented("operation TapiOamPostOperationsDeleteOamJob has not yet been implemented")
		}),
		TapiOamPostOperationsDeleteOamServiceHandler: tapi_oam.PostOperationsDeleteOamServiceHandlerFunc(func(params tapi_oam.PostOperationsDeleteOamServiceParams) middleware.Responder {
			return middleware.NotImplemented("operation TapiOamPostOperationsDeleteOamService has not yet been implemented")
		}),
		TapiOamPostOperationsDeleteOamServiceEndPointHandler: tapi_oam.PostOperationsDeleteOamServiceEndPointHandlerFunc(func(params tapi_oam.PostOperationsDeleteOamServiceEndPointParams) middleware.Responder {
			return middleware.NotImplemented("operation TapiOamPostOperationsDeleteOamServiceEndPoint has not yet been implemented")
		}),
		TapiPathComputationPostOperationsDeleteP2PPathHandler: tapi_path_computation.PostOperationsDeleteP2PPathHandlerFunc(func(params tapi_path_computation.PostOperationsDeleteP2PPathParams) middleware.Responder {
			return middleware.NotImplemented("operation TapiPathComputationPostOperationsDeleteP2PPath has not yet been implemented")
		}),
		TapiVirtualNetworkPostOperationsDeleteVirtualNetworkServiceHandler: tapi_virtual_network.PostOperationsDeleteVirtualNetworkServiceHandlerFunc(func(params tapi_virtual_network.PostOperationsDeleteVirtualNetworkServiceParams) middleware.Responder {
			return middleware.NotImplemented("operation TapiVirtualNetworkPostOperationsDeleteVirtualNetworkService has not yet been implemented")
		}),
		TapiConnectivityPostOperationsGetConnectionDetailsHandler: tapi_connectivity.PostOperationsGetConnectionDetailsHandlerFunc(func(params tapi_connectivity.PostOperationsGetConnectionDetailsParams) middleware.Responder {
			return middleware.NotImplemented("operation TapiConnectivityPostOperationsGetConnectionDetails has not yet been implemented")
		}),
		TapiConnectivityPostOperationsGetConnectivityServiceDetailsHandler: tapi_connectivity.PostOperationsGetConnectivityServiceDetailsHandlerFunc(func(params tapi_connectivity.PostOperationsGetConnectivityServiceDetailsParams) middleware.Responder {
			return middleware.NotImplemented("operation TapiConnectivityPostOperationsGetConnectivityServiceDetails has not yet been implemented")
		}),
		TapiConnectivityPostOperationsGetConnectivityServiceListHandler: tapi_connectivity.PostOperationsGetConnectivityServiceListHandlerFunc(func(params tapi_connectivity.PostOperationsGetConnectivityServiceListParams) middleware.Responder {
			return middleware.NotImplemented("operation TapiConnectivityPostOperationsGetConnectivityServiceList has not yet been implemented")
		}),
		TapiTopologyPostOperationsGetLinkDetailsHandler: tapi_topology.PostOperationsGetLinkDetailsHandlerFunc(func(params tapi_topology.PostOperationsGetLinkDetailsParams) middleware.Responder {
			return middleware.NotImplemented("operation TapiTopologyPostOperationsGetLinkDetails has not yet been implemented")
		}),
		TapiOamPostOperationsGetMegHandler: tapi_oam.PostOperationsGetMegHandlerFunc(func(params tapi_oam.PostOperationsGetMegParams) middleware.Responder {
			return middleware.NotImplemented("operation TapiOamPostOperationsGetMeg has not yet been implemented")
		}),
		TapiTopologyPostOperationsGetNodeDetailsHandler: tapi_topology.PostOperationsGetNodeDetailsHandlerFunc(func(params tapi_topology.PostOperationsGetNodeDetailsParams) middleware.Responder {
			return middleware.NotImplemented("operation TapiTopologyPostOperationsGetNodeDetails has not yet been implemented")
		}),
		TapiTopologyPostOperationsGetNodeEdgePointDetailsHandler: tapi_topology.PostOperationsGetNodeEdgePointDetailsHandlerFunc(func(params tapi_topology.PostOperationsGetNodeEdgePointDetailsParams) middleware.Responder {
			return middleware.NotImplemented("operation TapiTopologyPostOperationsGetNodeEdgePointDetails has not yet been implemented")
		}),
		TapiNotificationPostOperationsGetNotificationListHandler: tapi_notification.PostOperationsGetNotificationListHandlerFunc(func(params tapi_notification.PostOperationsGetNotificationListParams) middleware.Responder {
			return middleware.NotImplemented("operation TapiNotificationPostOperationsGetNotificationList has not yet been implemented")
		}),
		TapiNotificationPostOperationsGetNotificationSubscriptionServiceDetailsHandler: tapi_notification.PostOperationsGetNotificationSubscriptionServiceDetailsHandlerFunc(func(params tapi_notification.PostOperationsGetNotificationSubscriptionServiceDetailsParams) middleware.Responder {
			return middleware.NotImplemented("operation TapiNotificationPostOperationsGetNotificationSubscriptionServiceDetails has not yet been implemented")
		}),
		TapiNotificationPostOperationsGetNotificationSubscriptionServiceListHandler: tapi_notification.PostOperationsGetNotificationSubscriptionServiceListHandlerFunc(func(params tapi_notification.PostOperationsGetNotificationSubscriptionServiceListParams) middleware.Responder {
			return middleware.NotImplemented("operation TapiNotificationPostOperationsGetNotificationSubscriptionServiceList has not yet been implemented")
		}),
		TapiOamPostOperationsGetOamJobHandler: tapi_oam.PostOperationsGetOamJobHandlerFunc(func(params tapi_oam.PostOperationsGetOamJobParams) middleware.Responder {
			return middleware.NotImplemented("operation TapiOamPostOperationsGetOamJob has not yet been implemented")
		}),
		TapiOamPostOperationsGetOamServiceHandler: tapi_oam.PostOperationsGetOamServiceHandlerFunc(func(params tapi_oam.PostOperationsGetOamServiceParams) middleware.Responder {
			return middleware.NotImplemented("operation TapiOamPostOperationsGetOamService has not yet been implemented")
		}),
		TapiOamPostOperationsGetOamServiceEndPointHandler: tapi_oam.PostOperationsGetOamServiceEndPointHandlerFunc(func(params tapi_oam.PostOperationsGetOamServiceEndPointParams) middleware.Responder {
			return middleware.NotImplemented("operation TapiOamPostOperationsGetOamServiceEndPoint has not yet been implemented")
		}),
		TapiOamPostOperationsGetOamServiceListHandler: tapi_oam.PostOperationsGetOamServiceListHandlerFunc(func(params tapi_oam.PostOperationsGetOamServiceListParams) middleware.Responder {
			return middleware.NotImplemented("operation TapiOamPostOperationsGetOamServiceList has not yet been implemented")
		}),
		TapiCommonPostOperationsGetServiceInterfacePointDetailsHandler: tapi_common.PostOperationsGetServiceInterfacePointDetailsHandlerFunc(func(params tapi_common.PostOperationsGetServiceInterfacePointDetailsParams) middleware.Responder {
			return middleware.NotImplemented("operation TapiCommonPostOperationsGetServiceInterfacePointDetails has not yet been implemented")
		}),
		TapiCommonPostOperationsGetServiceInterfacePointListHandler: tapi_common.PostOperationsGetServiceInterfacePointListHandlerFunc(func(params tapi_common.PostOperationsGetServiceInterfacePointListParams) middleware.Responder {
			return middleware.NotImplemented("operation TapiCommonPostOperationsGetServiceInterfacePointList has not yet been implemented")
		}),
		TapiNotificationPostOperationsGetSupportedNotificationTypesHandler: tapi_notification.PostOperationsGetSupportedNotificationTypesHandlerFunc(func(params tapi_notification.PostOperationsGetSupportedNotificationTypesParams) middleware.Responder {
			return middleware.NotImplemented("operation TapiNotificationPostOperationsGetSupportedNotificationTypes has not yet been implemented")
		}),
		TapiTopologyPostOperationsGetTopologyDetailsHandler: tapi_topology.PostOperationsGetTopologyDetailsHandlerFunc(func(params tapi_topology.PostOperationsGetTopologyDetailsParams) middleware.Responder {
			return middleware.NotImplemented("operation TapiTopologyPostOperationsGetTopologyDetails has not yet been implemented")
		}),
		TapiTopologyPostOperationsGetTopologyListHandler: tapi_topology.PostOperationsGetTopologyListHandlerFunc(func(params tapi_topology.PostOperationsGetTopologyListParams) middleware.Responder {
			return middleware.NotImplemented("operation TapiTopologyPostOperationsGetTopologyList has not yet been implemented")
		}),
		TapiVirtualNetworkPostOperationsGetVirtualNetworkServiceDetailsHandler: tapi_virtual_network.PostOperationsGetVirtualNetworkServiceDetailsHandlerFunc(func(params tapi_virtual_network.PostOperationsGetVirtualNetworkServiceDetailsParams) middleware.Responder {
			return middleware.NotImplemented("operation TapiVirtualNetworkPostOperationsGetVirtualNetworkServiceDetails has not yet been implemented")
		}),
		TapiVirtualNetworkPostOperationsGetVirtualNetworkServiceListHandler: tapi_virtual_network.PostOperationsGetVirtualNetworkServiceListHandlerFunc(func(params tapi_virtual_network.PostOperationsGetVirtualNetworkServiceListParams) middleware.Responder {
			return middleware.NotImplemented("operation TapiVirtualNetworkPostOperationsGetVirtualNetworkServiceList has not yet been implemented")
		}),
		TapiPathComputationPostOperationsOptimizeP2PPathHandler: tapi_path_computation.PostOperationsOptimizeP2PPathHandlerFunc(func(params tapi_path_computation.PostOperationsOptimizeP2PPathParams) middleware.Responder {
			return middleware.NotImplemented("operation TapiPathComputationPostOperationsOptimizeP2PPath has not yet been implemented")
		}),
		TapiConnectivityPostOperationsUpdateConnectivityServiceHandler: tapi_connectivity.PostOperationsUpdateConnectivityServiceHandlerFunc(func(params tapi_connectivity.PostOperationsUpdateConnectivityServiceParams) middleware.Responder {
			return middleware.NotImplemented("operation TapiConnectivityPostOperationsUpdateConnectivityService has not yet been implemented")
		}),
		TapiNotificationPostOperationsUpdateNotificationSubscriptionServiceHandler: tapi_notification.PostOperationsUpdateNotificationSubscriptionServiceHandlerFunc(func(params tapi_notification.PostOperationsUpdateNotificationSubscriptionServiceParams) middleware.Responder {
			return middleware.NotImplemented("operation TapiNotificationPostOperationsUpdateNotificationSubscriptionService has not yet been implemented")
		}),
		TapiOamPostOperationsUpdateOamJobHandler: tapi_oam.PostOperationsUpdateOamJobHandlerFunc(func(params tapi_oam.PostOperationsUpdateOamJobParams) middleware.Responder {
			return middleware.NotImplemented("operation TapiOamPostOperationsUpdateOamJob has not yet been implemented")
		}),
		TapiOamPostOperationsUpdateOamServiceHandler: tapi_oam.PostOperationsUpdateOamServiceHandlerFunc(func(params tapi_oam.PostOperationsUpdateOamServiceParams) middleware.Responder {
			return middleware.NotImplemented("operation TapiOamPostOperationsUpdateOamService has not yet been implemented")
		}),
		TapiOamPostOperationsUpdateOamServiceEndPointHandler: tapi_oam.PostOperationsUpdateOamServiceEndPointHandlerFunc(func(params tapi_oam.PostOperationsUpdateOamServiceEndPointParams) middleware.Responder {
			return middleware.NotImplemented("operation TapiOamPostOperationsUpdateOamServiceEndPoint has not yet been implemented")
		}),
		TapiCommonPostOperationsUpdateServiceInterfacePointHandler: tapi_common.PostOperationsUpdateServiceInterfacePointHandlerFunc(func(params tapi_common.PostOperationsUpdateServiceInterfacePointParams) middleware.Responder {
			return middleware.NotImplemented("operation TapiCommonPostOperationsUpdateServiceInterfacePoint has not yet been implemented")
		}),
	}
}

/*TapiAPI tapi-odu,tapi-oam,tapi-connectivity,tapi-photonic-media,tapi-dsr,tapi-path-computation,tapi-eth,tapi-common,tapi-topology,tapi-virtual-network,tapi-notification API generated from yang definitions */
type TapiAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/yang-data+json" mime type
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/yang-data+json" mime type
	JSONProducer runtime.Producer

	// TapiCommonGetDataContextHandler sets the operation handler for the get data context operation
	TapiCommonGetDataContextHandler tapi_common.GetDataContextHandler
	// TapiCommonGetDataContextServiceInterfacePointUUIDHandler sets the operation handler for the get data context service interface point UUID operation
	TapiCommonGetDataContextServiceInterfacePointUUIDHandler tapi_common.GetDataContextServiceInterfacePointUUIDHandler
	// TapiPathComputationPostOperationsComputeP2PPathHandler sets the operation handler for the post operations compute p2 p path operation
	TapiPathComputationPostOperationsComputeP2PPathHandler tapi_path_computation.PostOperationsComputeP2PPathHandler
	// TapiConnectivityPostOperationsCreateConnectivityServiceHandler sets the operation handler for the post operations create connectivity service operation
	TapiConnectivityPostOperationsCreateConnectivityServiceHandler tapi_connectivity.PostOperationsCreateConnectivityServiceHandler
	// TapiNotificationPostOperationsCreateNotificationSubscriptionServiceHandler sets the operation handler for the post operations create notification subscription service operation
	TapiNotificationPostOperationsCreateNotificationSubscriptionServiceHandler tapi_notification.PostOperationsCreateNotificationSubscriptionServiceHandler
	// TapiOamPostOperationsCreateOamJobHandler sets the operation handler for the post operations create oam job operation
	TapiOamPostOperationsCreateOamJobHandler tapi_oam.PostOperationsCreateOamJobHandler
	// TapiOamPostOperationsCreateOamServiceHandler sets the operation handler for the post operations create oam service operation
	TapiOamPostOperationsCreateOamServiceHandler tapi_oam.PostOperationsCreateOamServiceHandler
	// TapiOamPostOperationsCreateOamServiceEndPointHandler sets the operation handler for the post operations create oam service end point operation
	TapiOamPostOperationsCreateOamServiceEndPointHandler tapi_oam.PostOperationsCreateOamServiceEndPointHandler
	// TapiVirtualNetworkPostOperationsCreateVirtualNetworkServiceHandler sets the operation handler for the post operations create virtual network service operation
	TapiVirtualNetworkPostOperationsCreateVirtualNetworkServiceHandler tapi_virtual_network.PostOperationsCreateVirtualNetworkServiceHandler
	// TapiConnectivityPostOperationsDeleteConnectivityServiceHandler sets the operation handler for the post operations delete connectivity service operation
	TapiConnectivityPostOperationsDeleteConnectivityServiceHandler tapi_connectivity.PostOperationsDeleteConnectivityServiceHandler
	// TapiNotificationPostOperationsDeleteNotificationSubscriptionServiceHandler sets the operation handler for the post operations delete notification subscription service operation
	TapiNotificationPostOperationsDeleteNotificationSubscriptionServiceHandler tapi_notification.PostOperationsDeleteNotificationSubscriptionServiceHandler
	// TapiOamPostOperationsDeleteOamJobHandler sets the operation handler for the post operations delete oam job operation
	TapiOamPostOperationsDeleteOamJobHandler tapi_oam.PostOperationsDeleteOamJobHandler
	// TapiOamPostOperationsDeleteOamServiceHandler sets the operation handler for the post operations delete oam service operation
	TapiOamPostOperationsDeleteOamServiceHandler tapi_oam.PostOperationsDeleteOamServiceHandler
	// TapiOamPostOperationsDeleteOamServiceEndPointHandler sets the operation handler for the post operations delete oam service end point operation
	TapiOamPostOperationsDeleteOamServiceEndPointHandler tapi_oam.PostOperationsDeleteOamServiceEndPointHandler
	// TapiPathComputationPostOperationsDeleteP2PPathHandler sets the operation handler for the post operations delete p2 p path operation
	TapiPathComputationPostOperationsDeleteP2PPathHandler tapi_path_computation.PostOperationsDeleteP2PPathHandler
	// TapiVirtualNetworkPostOperationsDeleteVirtualNetworkServiceHandler sets the operation handler for the post operations delete virtual network service operation
	TapiVirtualNetworkPostOperationsDeleteVirtualNetworkServiceHandler tapi_virtual_network.PostOperationsDeleteVirtualNetworkServiceHandler
	// TapiConnectivityPostOperationsGetConnectionDetailsHandler sets the operation handler for the post operations get connection details operation
	TapiConnectivityPostOperationsGetConnectionDetailsHandler tapi_connectivity.PostOperationsGetConnectionDetailsHandler
	// TapiConnectivityPostOperationsGetConnectivityServiceDetailsHandler sets the operation handler for the post operations get connectivity service details operation
	TapiConnectivityPostOperationsGetConnectivityServiceDetailsHandler tapi_connectivity.PostOperationsGetConnectivityServiceDetailsHandler
	// TapiConnectivityPostOperationsGetConnectivityServiceListHandler sets the operation handler for the post operations get connectivity service list operation
	TapiConnectivityPostOperationsGetConnectivityServiceListHandler tapi_connectivity.PostOperationsGetConnectivityServiceListHandler
	// TapiTopologyPostOperationsGetLinkDetailsHandler sets the operation handler for the post operations get link details operation
	TapiTopologyPostOperationsGetLinkDetailsHandler tapi_topology.PostOperationsGetLinkDetailsHandler
	// TapiOamPostOperationsGetMegHandler sets the operation handler for the post operations get meg operation
	TapiOamPostOperationsGetMegHandler tapi_oam.PostOperationsGetMegHandler
	// TapiTopologyPostOperationsGetNodeDetailsHandler sets the operation handler for the post operations get node details operation
	TapiTopologyPostOperationsGetNodeDetailsHandler tapi_topology.PostOperationsGetNodeDetailsHandler
	// TapiTopologyPostOperationsGetNodeEdgePointDetailsHandler sets the operation handler for the post operations get node edge point details operation
	TapiTopologyPostOperationsGetNodeEdgePointDetailsHandler tapi_topology.PostOperationsGetNodeEdgePointDetailsHandler
	// TapiNotificationPostOperationsGetNotificationListHandler sets the operation handler for the post operations get notification list operation
	TapiNotificationPostOperationsGetNotificationListHandler tapi_notification.PostOperationsGetNotificationListHandler
	// TapiNotificationPostOperationsGetNotificationSubscriptionServiceDetailsHandler sets the operation handler for the post operations get notification subscription service details operation
	TapiNotificationPostOperationsGetNotificationSubscriptionServiceDetailsHandler tapi_notification.PostOperationsGetNotificationSubscriptionServiceDetailsHandler
	// TapiNotificationPostOperationsGetNotificationSubscriptionServiceListHandler sets the operation handler for the post operations get notification subscription service list operation
	TapiNotificationPostOperationsGetNotificationSubscriptionServiceListHandler tapi_notification.PostOperationsGetNotificationSubscriptionServiceListHandler
	// TapiOamPostOperationsGetOamJobHandler sets the operation handler for the post operations get oam job operation
	TapiOamPostOperationsGetOamJobHandler tapi_oam.PostOperationsGetOamJobHandler
	// TapiOamPostOperationsGetOamServiceHandler sets the operation handler for the post operations get oam service operation
	TapiOamPostOperationsGetOamServiceHandler tapi_oam.PostOperationsGetOamServiceHandler
	// TapiOamPostOperationsGetOamServiceEndPointHandler sets the operation handler for the post operations get oam service end point operation
	TapiOamPostOperationsGetOamServiceEndPointHandler tapi_oam.PostOperationsGetOamServiceEndPointHandler
	// TapiOamPostOperationsGetOamServiceListHandler sets the operation handler for the post operations get oam service list operation
	TapiOamPostOperationsGetOamServiceListHandler tapi_oam.PostOperationsGetOamServiceListHandler
	// TapiCommonPostOperationsGetServiceInterfacePointDetailsHandler sets the operation handler for the post operations get service interface point details operation
	TapiCommonPostOperationsGetServiceInterfacePointDetailsHandler tapi_common.PostOperationsGetServiceInterfacePointDetailsHandler
	// TapiCommonPostOperationsGetServiceInterfacePointListHandler sets the operation handler for the post operations get service interface point list operation
	TapiCommonPostOperationsGetServiceInterfacePointListHandler tapi_common.PostOperationsGetServiceInterfacePointListHandler
	// TapiNotificationPostOperationsGetSupportedNotificationTypesHandler sets the operation handler for the post operations get supported notification types operation
	TapiNotificationPostOperationsGetSupportedNotificationTypesHandler tapi_notification.PostOperationsGetSupportedNotificationTypesHandler
	// TapiTopologyPostOperationsGetTopologyDetailsHandler sets the operation handler for the post operations get topology details operation
	TapiTopologyPostOperationsGetTopologyDetailsHandler tapi_topology.PostOperationsGetTopologyDetailsHandler
	// TapiTopologyPostOperationsGetTopologyListHandler sets the operation handler for the post operations get topology list operation
	TapiTopologyPostOperationsGetTopologyListHandler tapi_topology.PostOperationsGetTopologyListHandler
	// TapiVirtualNetworkPostOperationsGetVirtualNetworkServiceDetailsHandler sets the operation handler for the post operations get virtual network service details operation
	TapiVirtualNetworkPostOperationsGetVirtualNetworkServiceDetailsHandler tapi_virtual_network.PostOperationsGetVirtualNetworkServiceDetailsHandler
	// TapiVirtualNetworkPostOperationsGetVirtualNetworkServiceListHandler sets the operation handler for the post operations get virtual network service list operation
	TapiVirtualNetworkPostOperationsGetVirtualNetworkServiceListHandler tapi_virtual_network.PostOperationsGetVirtualNetworkServiceListHandler
	// TapiPathComputationPostOperationsOptimizeP2PPathHandler sets the operation handler for the post operations optimize p2 p path operation
	TapiPathComputationPostOperationsOptimizeP2PPathHandler tapi_path_computation.PostOperationsOptimizeP2PPathHandler
	// TapiConnectivityPostOperationsUpdateConnectivityServiceHandler sets the operation handler for the post operations update connectivity service operation
	TapiConnectivityPostOperationsUpdateConnectivityServiceHandler tapi_connectivity.PostOperationsUpdateConnectivityServiceHandler
	// TapiNotificationPostOperationsUpdateNotificationSubscriptionServiceHandler sets the operation handler for the post operations update notification subscription service operation
	TapiNotificationPostOperationsUpdateNotificationSubscriptionServiceHandler tapi_notification.PostOperationsUpdateNotificationSubscriptionServiceHandler
	// TapiOamPostOperationsUpdateOamJobHandler sets the operation handler for the post operations update oam job operation
	TapiOamPostOperationsUpdateOamJobHandler tapi_oam.PostOperationsUpdateOamJobHandler
	// TapiOamPostOperationsUpdateOamServiceHandler sets the operation handler for the post operations update oam service operation
	TapiOamPostOperationsUpdateOamServiceHandler tapi_oam.PostOperationsUpdateOamServiceHandler
	// TapiOamPostOperationsUpdateOamServiceEndPointHandler sets the operation handler for the post operations update oam service end point operation
	TapiOamPostOperationsUpdateOamServiceEndPointHandler tapi_oam.PostOperationsUpdateOamServiceEndPointHandler
	// TapiCommonPostOperationsUpdateServiceInterfacePointHandler sets the operation handler for the post operations update service interface point operation
	TapiCommonPostOperationsUpdateServiceInterfacePointHandler tapi_common.PostOperationsUpdateServiceInterfacePointHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *TapiAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *TapiAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *TapiAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *TapiAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *TapiAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *TapiAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *TapiAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the TapiAPI
func (o *TapiAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.TapiCommonGetDataContextHandler == nil {
		unregistered = append(unregistered, "tapi_common.GetDataContextHandler")
	}

	if o.TapiCommonGetDataContextServiceInterfacePointUUIDHandler == nil {
		unregistered = append(unregistered, "tapi_common.GetDataContextServiceInterfacePointUUIDHandler")
	}

	if o.TapiPathComputationPostOperationsComputeP2PPathHandler == nil {
		unregistered = append(unregistered, "tapi_path_computation.PostOperationsComputeP2PPathHandler")
	}

	if o.TapiConnectivityPostOperationsCreateConnectivityServiceHandler == nil {
		unregistered = append(unregistered, "tapi_connectivity.PostOperationsCreateConnectivityServiceHandler")
	}

	if o.TapiNotificationPostOperationsCreateNotificationSubscriptionServiceHandler == nil {
		unregistered = append(unregistered, "tapi_notification.PostOperationsCreateNotificationSubscriptionServiceHandler")
	}

	if o.TapiOamPostOperationsCreateOamJobHandler == nil {
		unregistered = append(unregistered, "tapi_oam.PostOperationsCreateOamJobHandler")
	}

	if o.TapiOamPostOperationsCreateOamServiceHandler == nil {
		unregistered = append(unregistered, "tapi_oam.PostOperationsCreateOamServiceHandler")
	}

	if o.TapiOamPostOperationsCreateOamServiceEndPointHandler == nil {
		unregistered = append(unregistered, "tapi_oam.PostOperationsCreateOamServiceEndPointHandler")
	}

	if o.TapiVirtualNetworkPostOperationsCreateVirtualNetworkServiceHandler == nil {
		unregistered = append(unregistered, "tapi_virtual_network.PostOperationsCreateVirtualNetworkServiceHandler")
	}

	if o.TapiConnectivityPostOperationsDeleteConnectivityServiceHandler == nil {
		unregistered = append(unregistered, "tapi_connectivity.PostOperationsDeleteConnectivityServiceHandler")
	}

	if o.TapiNotificationPostOperationsDeleteNotificationSubscriptionServiceHandler == nil {
		unregistered = append(unregistered, "tapi_notification.PostOperationsDeleteNotificationSubscriptionServiceHandler")
	}

	if o.TapiOamPostOperationsDeleteOamJobHandler == nil {
		unregistered = append(unregistered, "tapi_oam.PostOperationsDeleteOamJobHandler")
	}

	if o.TapiOamPostOperationsDeleteOamServiceHandler == nil {
		unregistered = append(unregistered, "tapi_oam.PostOperationsDeleteOamServiceHandler")
	}

	if o.TapiOamPostOperationsDeleteOamServiceEndPointHandler == nil {
		unregistered = append(unregistered, "tapi_oam.PostOperationsDeleteOamServiceEndPointHandler")
	}

	if o.TapiPathComputationPostOperationsDeleteP2PPathHandler == nil {
		unregistered = append(unregistered, "tapi_path_computation.PostOperationsDeleteP2PPathHandler")
	}

	if o.TapiVirtualNetworkPostOperationsDeleteVirtualNetworkServiceHandler == nil {
		unregistered = append(unregistered, "tapi_virtual_network.PostOperationsDeleteVirtualNetworkServiceHandler")
	}

	if o.TapiConnectivityPostOperationsGetConnectionDetailsHandler == nil {
		unregistered = append(unregistered, "tapi_connectivity.PostOperationsGetConnectionDetailsHandler")
	}

	if o.TapiConnectivityPostOperationsGetConnectivityServiceDetailsHandler == nil {
		unregistered = append(unregistered, "tapi_connectivity.PostOperationsGetConnectivityServiceDetailsHandler")
	}

	if o.TapiConnectivityPostOperationsGetConnectivityServiceListHandler == nil {
		unregistered = append(unregistered, "tapi_connectivity.PostOperationsGetConnectivityServiceListHandler")
	}

	if o.TapiTopologyPostOperationsGetLinkDetailsHandler == nil {
		unregistered = append(unregistered, "tapi_topology.PostOperationsGetLinkDetailsHandler")
	}

	if o.TapiOamPostOperationsGetMegHandler == nil {
		unregistered = append(unregistered, "tapi_oam.PostOperationsGetMegHandler")
	}

	if o.TapiTopologyPostOperationsGetNodeDetailsHandler == nil {
		unregistered = append(unregistered, "tapi_topology.PostOperationsGetNodeDetailsHandler")
	}

	if o.TapiTopologyPostOperationsGetNodeEdgePointDetailsHandler == nil {
		unregistered = append(unregistered, "tapi_topology.PostOperationsGetNodeEdgePointDetailsHandler")
	}

	if o.TapiNotificationPostOperationsGetNotificationListHandler == nil {
		unregistered = append(unregistered, "tapi_notification.PostOperationsGetNotificationListHandler")
	}

	if o.TapiNotificationPostOperationsGetNotificationSubscriptionServiceDetailsHandler == nil {
		unregistered = append(unregistered, "tapi_notification.PostOperationsGetNotificationSubscriptionServiceDetailsHandler")
	}

	if o.TapiNotificationPostOperationsGetNotificationSubscriptionServiceListHandler == nil {
		unregistered = append(unregistered, "tapi_notification.PostOperationsGetNotificationSubscriptionServiceListHandler")
	}

	if o.TapiOamPostOperationsGetOamJobHandler == nil {
		unregistered = append(unregistered, "tapi_oam.PostOperationsGetOamJobHandler")
	}

	if o.TapiOamPostOperationsGetOamServiceHandler == nil {
		unregistered = append(unregistered, "tapi_oam.PostOperationsGetOamServiceHandler")
	}

	if o.TapiOamPostOperationsGetOamServiceEndPointHandler == nil {
		unregistered = append(unregistered, "tapi_oam.PostOperationsGetOamServiceEndPointHandler")
	}

	if o.TapiOamPostOperationsGetOamServiceListHandler == nil {
		unregistered = append(unregistered, "tapi_oam.PostOperationsGetOamServiceListHandler")
	}

	if o.TapiCommonPostOperationsGetServiceInterfacePointDetailsHandler == nil {
		unregistered = append(unregistered, "tapi_common.PostOperationsGetServiceInterfacePointDetailsHandler")
	}

	if o.TapiCommonPostOperationsGetServiceInterfacePointListHandler == nil {
		unregistered = append(unregistered, "tapi_common.PostOperationsGetServiceInterfacePointListHandler")
	}

	if o.TapiNotificationPostOperationsGetSupportedNotificationTypesHandler == nil {
		unregistered = append(unregistered, "tapi_notification.PostOperationsGetSupportedNotificationTypesHandler")
	}

	if o.TapiTopologyPostOperationsGetTopologyDetailsHandler == nil {
		unregistered = append(unregistered, "tapi_topology.PostOperationsGetTopologyDetailsHandler")
	}

	if o.TapiTopologyPostOperationsGetTopologyListHandler == nil {
		unregistered = append(unregistered, "tapi_topology.PostOperationsGetTopologyListHandler")
	}

	if o.TapiVirtualNetworkPostOperationsGetVirtualNetworkServiceDetailsHandler == nil {
		unregistered = append(unregistered, "tapi_virtual_network.PostOperationsGetVirtualNetworkServiceDetailsHandler")
	}

	if o.TapiVirtualNetworkPostOperationsGetVirtualNetworkServiceListHandler == nil {
		unregistered = append(unregistered, "tapi_virtual_network.PostOperationsGetVirtualNetworkServiceListHandler")
	}

	if o.TapiPathComputationPostOperationsOptimizeP2PPathHandler == nil {
		unregistered = append(unregistered, "tapi_path_computation.PostOperationsOptimizeP2PPathHandler")
	}

	if o.TapiConnectivityPostOperationsUpdateConnectivityServiceHandler == nil {
		unregistered = append(unregistered, "tapi_connectivity.PostOperationsUpdateConnectivityServiceHandler")
	}

	if o.TapiNotificationPostOperationsUpdateNotificationSubscriptionServiceHandler == nil {
		unregistered = append(unregistered, "tapi_notification.PostOperationsUpdateNotificationSubscriptionServiceHandler")
	}

	if o.TapiOamPostOperationsUpdateOamJobHandler == nil {
		unregistered = append(unregistered, "tapi_oam.PostOperationsUpdateOamJobHandler")
	}

	if o.TapiOamPostOperationsUpdateOamServiceHandler == nil {
		unregistered = append(unregistered, "tapi_oam.PostOperationsUpdateOamServiceHandler")
	}

	if o.TapiOamPostOperationsUpdateOamServiceEndPointHandler == nil {
		unregistered = append(unregistered, "tapi_oam.PostOperationsUpdateOamServiceEndPointHandler")
	}

	if o.TapiCommonPostOperationsUpdateServiceInterfacePointHandler == nil {
		unregistered = append(unregistered, "tapi_common.PostOperationsUpdateServiceInterfacePointHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *TapiAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *TapiAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	return nil

}

// Authorizer returns the registered authorizer
func (o *TapiAPI) Authorizer() runtime.Authorizer {

	return nil

}

// ConsumersFor gets the consumers for the specified media types
func (o *TapiAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/yang-data+json":
			result["application/yang-data+json"] = o.JSONConsumer

		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *TapiAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/yang-data+json":
			result["application/yang-data+json"] = o.JSONProducer

		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *TapiAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the tapi API
func (o *TapiAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *TapiAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/data/context"] = tapi_common.NewGetDataContext(o.context, o.TapiCommonGetDataContextHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/data/context/service-interface-point={uuid}"] = tapi_common.NewGetDataContextServiceInterfacePointUUID(o.context, o.TapiCommonGetDataContextServiceInterfacePointUUIDHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/operations/compute-p-2-p-path"] = tapi_path_computation.NewPostOperationsComputeP2PPath(o.context, o.TapiPathComputationPostOperationsComputeP2PPathHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/operations/create-connectivity-service"] = tapi_connectivity.NewPostOperationsCreateConnectivityService(o.context, o.TapiConnectivityPostOperationsCreateConnectivityServiceHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/operations/create-notification-subscription-service"] = tapi_notification.NewPostOperationsCreateNotificationSubscriptionService(o.context, o.TapiNotificationPostOperationsCreateNotificationSubscriptionServiceHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/operations/create-oam-job"] = tapi_oam.NewPostOperationsCreateOamJob(o.context, o.TapiOamPostOperationsCreateOamJobHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/operations/create-oam-service"] = tapi_oam.NewPostOperationsCreateOamService(o.context, o.TapiOamPostOperationsCreateOamServiceHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/operations/create-oam-service-end-point"] = tapi_oam.NewPostOperationsCreateOamServiceEndPoint(o.context, o.TapiOamPostOperationsCreateOamServiceEndPointHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/operations/create-virtual-network-service"] = tapi_virtual_network.NewPostOperationsCreateVirtualNetworkService(o.context, o.TapiVirtualNetworkPostOperationsCreateVirtualNetworkServiceHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/operations/delete-connectivity-service"] = tapi_connectivity.NewPostOperationsDeleteConnectivityService(o.context, o.TapiConnectivityPostOperationsDeleteConnectivityServiceHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/operations/delete-notification-subscription-service"] = tapi_notification.NewPostOperationsDeleteNotificationSubscriptionService(o.context, o.TapiNotificationPostOperationsDeleteNotificationSubscriptionServiceHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/operations/delete-oam-job"] = tapi_oam.NewPostOperationsDeleteOamJob(o.context, o.TapiOamPostOperationsDeleteOamJobHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/operations/delete-oam-service"] = tapi_oam.NewPostOperationsDeleteOamService(o.context, o.TapiOamPostOperationsDeleteOamServiceHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/operations/delete-oam-service-end-point"] = tapi_oam.NewPostOperationsDeleteOamServiceEndPoint(o.context, o.TapiOamPostOperationsDeleteOamServiceEndPointHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/operations/delete-p-2-p-path"] = tapi_path_computation.NewPostOperationsDeleteP2PPath(o.context, o.TapiPathComputationPostOperationsDeleteP2PPathHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/operations/delete-virtual-network-service"] = tapi_virtual_network.NewPostOperationsDeleteVirtualNetworkService(o.context, o.TapiVirtualNetworkPostOperationsDeleteVirtualNetworkServiceHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/operations/get-connection-details"] = tapi_connectivity.NewPostOperationsGetConnectionDetails(o.context, o.TapiConnectivityPostOperationsGetConnectionDetailsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/operations/get-connectivity-service-details"] = tapi_connectivity.NewPostOperationsGetConnectivityServiceDetails(o.context, o.TapiConnectivityPostOperationsGetConnectivityServiceDetailsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/operations/get-connectivity-service-list"] = tapi_connectivity.NewPostOperationsGetConnectivityServiceList(o.context, o.TapiConnectivityPostOperationsGetConnectivityServiceListHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/operations/get-link-details"] = tapi_topology.NewPostOperationsGetLinkDetails(o.context, o.TapiTopologyPostOperationsGetLinkDetailsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/operations/get-meg"] = tapi_oam.NewPostOperationsGetMeg(o.context, o.TapiOamPostOperationsGetMegHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/operations/get-node-details"] = tapi_topology.NewPostOperationsGetNodeDetails(o.context, o.TapiTopologyPostOperationsGetNodeDetailsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/operations/get-node-edge-point-details"] = tapi_topology.NewPostOperationsGetNodeEdgePointDetails(o.context, o.TapiTopologyPostOperationsGetNodeEdgePointDetailsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/operations/get-notification-list"] = tapi_notification.NewPostOperationsGetNotificationList(o.context, o.TapiNotificationPostOperationsGetNotificationListHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/operations/get-notification-subscription-service-details"] = tapi_notification.NewPostOperationsGetNotificationSubscriptionServiceDetails(o.context, o.TapiNotificationPostOperationsGetNotificationSubscriptionServiceDetailsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/operations/get-notification-subscription-service-list"] = tapi_notification.NewPostOperationsGetNotificationSubscriptionServiceList(o.context, o.TapiNotificationPostOperationsGetNotificationSubscriptionServiceListHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/operations/get-oam-job"] = tapi_oam.NewPostOperationsGetOamJob(o.context, o.TapiOamPostOperationsGetOamJobHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/operations/get-oam-service"] = tapi_oam.NewPostOperationsGetOamService(o.context, o.TapiOamPostOperationsGetOamServiceHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/operations/get-oam-service-end-point"] = tapi_oam.NewPostOperationsGetOamServiceEndPoint(o.context, o.TapiOamPostOperationsGetOamServiceEndPointHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/operations/get-oam-service-list"] = tapi_oam.NewPostOperationsGetOamServiceList(o.context, o.TapiOamPostOperationsGetOamServiceListHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/operations/get-service-interface-point-details"] = tapi_common.NewPostOperationsGetServiceInterfacePointDetails(o.context, o.TapiCommonPostOperationsGetServiceInterfacePointDetailsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/operations/get-service-interface-point-list"] = tapi_common.NewPostOperationsGetServiceInterfacePointList(o.context, o.TapiCommonPostOperationsGetServiceInterfacePointListHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/operations/get-supported-notification-types"] = tapi_notification.NewPostOperationsGetSupportedNotificationTypes(o.context, o.TapiNotificationPostOperationsGetSupportedNotificationTypesHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/operations/get-topology-details"] = tapi_topology.NewPostOperationsGetTopologyDetails(o.context, o.TapiTopologyPostOperationsGetTopologyDetailsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/operations/get-topology-list"] = tapi_topology.NewPostOperationsGetTopologyList(o.context, o.TapiTopologyPostOperationsGetTopologyListHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/operations/get-virtual-network-service-details"] = tapi_virtual_network.NewPostOperationsGetVirtualNetworkServiceDetails(o.context, o.TapiVirtualNetworkPostOperationsGetVirtualNetworkServiceDetailsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/operations/get-virtual-network-service-list"] = tapi_virtual_network.NewPostOperationsGetVirtualNetworkServiceList(o.context, o.TapiVirtualNetworkPostOperationsGetVirtualNetworkServiceListHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/operations/optimize-p-2-p-path"] = tapi_path_computation.NewPostOperationsOptimizeP2PPath(o.context, o.TapiPathComputationPostOperationsOptimizeP2PPathHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/operations/update-connectivity-service"] = tapi_connectivity.NewPostOperationsUpdateConnectivityService(o.context, o.TapiConnectivityPostOperationsUpdateConnectivityServiceHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/operations/update-notification-subscription-service"] = tapi_notification.NewPostOperationsUpdateNotificationSubscriptionService(o.context, o.TapiNotificationPostOperationsUpdateNotificationSubscriptionServiceHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/operations/update-oam-job"] = tapi_oam.NewPostOperationsUpdateOamJob(o.context, o.TapiOamPostOperationsUpdateOamJobHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/operations/update-oam-service"] = tapi_oam.NewPostOperationsUpdateOamService(o.context, o.TapiOamPostOperationsUpdateOamServiceHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/operations/update-oam-service-end-point"] = tapi_oam.NewPostOperationsUpdateOamServiceEndPoint(o.context, o.TapiOamPostOperationsUpdateOamServiceEndPointHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/operations/update-service-interface-point"] = tapi_common.NewPostOperationsUpdateServiceInterfacePoint(o.context, o.TapiCommonPostOperationsUpdateServiceInterfacePointHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *TapiAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *TapiAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *TapiAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *TapiAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}
