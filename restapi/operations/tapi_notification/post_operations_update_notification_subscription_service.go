// Code generated by go-swagger; DO NOT EDIT.

package tapi_notification

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostOperationsUpdateNotificationSubscriptionServiceHandlerFunc turns a function with the right signature into a post operations update notification subscription service handler
type PostOperationsUpdateNotificationSubscriptionServiceHandlerFunc func(PostOperationsUpdateNotificationSubscriptionServiceParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostOperationsUpdateNotificationSubscriptionServiceHandlerFunc) Handle(params PostOperationsUpdateNotificationSubscriptionServiceParams) middleware.Responder {
	return fn(params)
}

// PostOperationsUpdateNotificationSubscriptionServiceHandler interface for that can handle valid post operations update notification subscription service params
type PostOperationsUpdateNotificationSubscriptionServiceHandler interface {
	Handle(PostOperationsUpdateNotificationSubscriptionServiceParams) middleware.Responder
}

// NewPostOperationsUpdateNotificationSubscriptionService creates a new http.Handler for the post operations update notification subscription service operation
func NewPostOperationsUpdateNotificationSubscriptionService(ctx *middleware.Context, handler PostOperationsUpdateNotificationSubscriptionServiceHandler) *PostOperationsUpdateNotificationSubscriptionService {
	return &PostOperationsUpdateNotificationSubscriptionService{Context: ctx, Handler: handler}
}

/*PostOperationsUpdateNotificationSubscriptionService swagger:route POST /operations/update-notification-subscription-service/ tapi-notification postOperationsUpdateNotificationSubscriptionService

PostOperationsUpdateNotificationSubscriptionService post operations update notification subscription service API

*/
type PostOperationsUpdateNotificationSubscriptionService struct {
	Context *middleware.Context
	Handler PostOperationsUpdateNotificationSubscriptionServiceHandler
}

func (o *PostOperationsUpdateNotificationSubscriptionService) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostOperationsUpdateNotificationSubscriptionServiceParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
