// Code generated by go-swagger; DO NOT EDIT.

package tapi_notification

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/damianoneill/tapi/models"
)

// PostOperationsGetSupportedNotificationTypesOKCode is the HTTP code returned for type PostOperationsGetSupportedNotificationTypesOK
const PostOperationsGetSupportedNotificationTypesOKCode int = 200

/*PostOperationsGetSupportedNotificationTypesOK Correct response

swagger:response postOperationsGetSupportedNotificationTypesOK
*/
type PostOperationsGetSupportedNotificationTypesOK struct {

	/*
	  In: Body
	*/
	Payload *models.TapiNotificationGetSupportedNotificationTypesOutput `json:"body,omitempty"`
}

// NewPostOperationsGetSupportedNotificationTypesOK creates PostOperationsGetSupportedNotificationTypesOK with default headers values
func NewPostOperationsGetSupportedNotificationTypesOK() *PostOperationsGetSupportedNotificationTypesOK {

	return &PostOperationsGetSupportedNotificationTypesOK{}
}

// WithPayload adds the payload to the post operations get supported notification types o k response
func (o *PostOperationsGetSupportedNotificationTypesOK) WithPayload(payload *models.TapiNotificationGetSupportedNotificationTypesOutput) *PostOperationsGetSupportedNotificationTypesOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post operations get supported notification types o k response
func (o *PostOperationsGetSupportedNotificationTypesOK) SetPayload(payload *models.TapiNotificationGetSupportedNotificationTypesOutput) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostOperationsGetSupportedNotificationTypesOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostOperationsGetSupportedNotificationTypesCreatedCode is the HTTP code returned for type PostOperationsGetSupportedNotificationTypesCreated
const PostOperationsGetSupportedNotificationTypesCreatedCode int = 201

/*PostOperationsGetSupportedNotificationTypesCreated No response

swagger:response postOperationsGetSupportedNotificationTypesCreated
*/
type PostOperationsGetSupportedNotificationTypesCreated struct {
}

// NewPostOperationsGetSupportedNotificationTypesCreated creates PostOperationsGetSupportedNotificationTypesCreated with default headers values
func NewPostOperationsGetSupportedNotificationTypesCreated() *PostOperationsGetSupportedNotificationTypesCreated {

	return &PostOperationsGetSupportedNotificationTypesCreated{}
}

// WriteResponse to the client
func (o *PostOperationsGetSupportedNotificationTypesCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(201)
}

// PostOperationsGetSupportedNotificationTypesBadRequestCode is the HTTP code returned for type PostOperationsGetSupportedNotificationTypesBadRequest
const PostOperationsGetSupportedNotificationTypesBadRequestCode int = 400

/*PostOperationsGetSupportedNotificationTypesBadRequest Internal error

swagger:response postOperationsGetSupportedNotificationTypesBadRequest
*/
type PostOperationsGetSupportedNotificationTypesBadRequest struct {
}

// NewPostOperationsGetSupportedNotificationTypesBadRequest creates PostOperationsGetSupportedNotificationTypesBadRequest with default headers values
func NewPostOperationsGetSupportedNotificationTypesBadRequest() *PostOperationsGetSupportedNotificationTypesBadRequest {

	return &PostOperationsGetSupportedNotificationTypesBadRequest{}
}

// WriteResponse to the client
func (o *PostOperationsGetSupportedNotificationTypesBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(400)
}
