// Code generated by go-swagger; DO NOT EDIT.

package tapi_notification

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostOperationsGetSupportedNotificationTypesHandlerFunc turns a function with the right signature into a post operations get supported notification types handler
type PostOperationsGetSupportedNotificationTypesHandlerFunc func(PostOperationsGetSupportedNotificationTypesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostOperationsGetSupportedNotificationTypesHandlerFunc) Handle(params PostOperationsGetSupportedNotificationTypesParams) middleware.Responder {
	return fn(params)
}

// PostOperationsGetSupportedNotificationTypesHandler interface for that can handle valid post operations get supported notification types params
type PostOperationsGetSupportedNotificationTypesHandler interface {
	Handle(PostOperationsGetSupportedNotificationTypesParams) middleware.Responder
}

// NewPostOperationsGetSupportedNotificationTypes creates a new http.Handler for the post operations get supported notification types operation
func NewPostOperationsGetSupportedNotificationTypes(ctx *middleware.Context, handler PostOperationsGetSupportedNotificationTypesHandler) *PostOperationsGetSupportedNotificationTypes {
	return &PostOperationsGetSupportedNotificationTypes{Context: ctx, Handler: handler}
}

/*PostOperationsGetSupportedNotificationTypes swagger:route POST /operations/get-supported-notification-types/ tapi-notification postOperationsGetSupportedNotificationTypes

PostOperationsGetSupportedNotificationTypes post operations get supported notification types API

*/
type PostOperationsGetSupportedNotificationTypes struct {
	Context *middleware.Context
	Handler PostOperationsGetSupportedNotificationTypesHandler
}

func (o *PostOperationsGetSupportedNotificationTypes) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostOperationsGetSupportedNotificationTypesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
